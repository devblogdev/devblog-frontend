export const posts = 
[
  {
    "id": 240,
    "abstract": "In an undirected graph edges can be traversed in the forward direction and in the reverse direction; how can then we detect cycles in such a graph? In this post we are going to discuss one method to solve this problem.",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EUndirected Graph Cycle Detection, Part I: Double-Path Finder Depth-First Search Algorithm\u003C/h1\u003E\n\u003Cp\u003EIn an undirected graph edges can be traversed in the forward direction and in the reverse direction; how can then we detect cycles in such a graph? In this post we are going to discuss one method to solve this problem.\u003C/p\u003E\n\u003Cp\u003EIcebreaker: if we were to include nodes in the digital representation of the number 6, would we find a cycle?\u003C/p\u003E\n\u003Ch2\u003EBackground\u003C/h2\u003E\n\u003Cp\u003ECycle detection in an undirected graph is presented in LeetCode's \u003Ca href=\"https://leetcode.com/problems/redundant-connection/\" target=\"_blank\"\u003ERedundant Connection problem\u003C/a\u003E. In this problem, we are given an \u003Cstrong\u003Eundirected graph\u003C/strong\u003E with \u003Ccode\u003En\u003C/code\u003E nodes, where \u003Ccode\u003En\u003C/code\u003E runs from \u003Ccode\u003E1\u003C/code\u003E to \u003Ccode\u003En\u003C/code\u003E, and \u003Ccode\u003En\u003C/code\u003E edges, and we are asked to remove one edge so that the resulting graph is a tree with \u003Ccode\u003En\u003C/code\u003E nodes. In addition, the given graph resulted originally from a tree that is connected and has no cycles. Find below the examples shown in the problem:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/x2wf4ck.png-hUgqEKiKg4uckZT\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EIn example 1 the output is \u003Ccode\u003E[2, 3]\u003C/code\u003E because it is the edge responsible for forming a cycle; similarly, in example 2 the output is \u003Ccode\u003E[1, 4]\u003C/code\u003E because it is the edge responsible for closing a cycle.\u003C/p\u003E\n\u003Cp\u003EThis is an interesting problem: the problem does not mention that the given graph is an \u003Cstrong\u003Eundirected cyclic graph\u003C/strong\u003E; however, if we write out some more example graphs using the givens of the problem, we'll be able to notice a common pattern (side-note: when solving problems, a whiteboard can be very useful, as you can draw example inputs for a given problem to better understand the scope of the problem and what is being asked; the computer's keyboard alone may not be enough!!!). Let's take a look at some example graphs below constructed using the givens:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/c8q8rL8.png-hE4KDpY5a4RZIj5\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EFrom the graphs, we can notice that, when the number of nodes is equal to the number of edges, it does not matter how we arrange the edges, there will always be at least one cycle in the graph. For example, for \u003Cstrong\u003Egraphs #1\u003C/strong\u003E, \u003Cstrong\u003E#3\u003C/strong\u003E, and \u003Cstrong\u003E#5\u003C/strong\u003E, there is a cycle between nodes \u003Ccode\u003E[1, 2, 5]\u003C/code\u003E, \u003Ccode\u003E[1, 2, 3, 4]\u003C/code\u003E, and \u003Ccode\u003E[4, 2, 3]\u003C/code\u003E, respectively.&nbsp;&nbsp;&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe problem asks to remove one edge so that the resulting graph is a tree of \u003Ccode\u003En\u003C/code\u003E nodes (\u003Cstrong\u003Eplease note that removing an edge means removing the line connecting two nodes, AND NOT the nodes themselves\u003C/strong\u003E). For \u003Cstrong\u003Egraph #1\u003C/strong\u003E above, if we remove either edge \u003Ccode\u003E[4, 3]\u003C/code\u003E or edge\u003Ccode\u003E[2, 3]\u003C/code\u003E, we will end up with two components (or two trees), where one of the components will contain a cycle, as shown in the below image:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/rwseKev.png-aQzFsAt3jiuNGjo\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EHence, for \u003Cstrong\u003Egraph #1\u003C/strong\u003E, we need to remove any of edges \u003Ccode\u003E[1, 5]\u003C/code\u003E, \u003Ccode\u003E[2, 1]\u003C/code\u003E or \u003Ccode\u003E[5,  2]\u003C/code\u003E for the resulting graph to be a tree with no cycles. Similarly, for \u003Cstrong\u003Egraph #3\u003C/strong\u003E, we need to remove any of the edges that form a cycle, that is, any of \u003Ccode\u003E[1, 4]\u003C/code\u003E, \u003Ccode\u003E[1, 2]\u003C/code\u003E, \u003Ccode\u003E[2, 3]\u003C/code\u003E, or \u003Ccode\u003E[4, 3]\u003C/code\u003E. Therefore, to solve the problem, we need to able to detect the cycle in the given graph!!!\u003C/p\u003E\n\u003Cp\u003EOne strategy to detect cycles in undirected graphs is a \u003Cstrong\u003Edouble-path finder depth-first search (dpf dfs) approach\u003C/strong\u003E. Basically, if we choose any two nodes on the graph, where one node is the \u003Ccode\u003Esource\u003C/code\u003E, and the other node is the \u003Ccode\u003Etarget\u003C/code\u003E, if there is more than one path for getting from \u003Ccode\u003Esource\u003C/code\u003E to \u003Ccode\u003Etarget\u003C/code\u003E, then the graph contains a cycle. For example, consider \u003Cstrong\u003Egraph #6\u003C/strong\u003E presented before: if we want to go from node \u003Ccode\u003E3\u003C/code\u003E to node \u003Ccode\u003E1\u003C/code\u003E, there is only one path to do so, but if we want to go from node \u003Ccode\u003E3\u003C/code\u003E to node \u003Ccode\u003E5\u003C/code\u003E, there are two different paths–either passing through node \u003Ccode\u003E2\u003C/code\u003E, or a direct path to node \u003Ccode\u003E5\u003C/code\u003E. Hence, the graph contains a cycle that includes at least the edge \u003Ccode\u003E[3, 5]\u003C/code\u003E. Notice that not all edges in the graph form a cycle, and that is why we are going to use depth-first search to find at least one edge at which a cycle is formed. For \u003Cstrong\u003Egraph #6\u003C/strong\u003E, edges \u003Ccode\u003E[3, 5]\u003C/code\u003E, \u003Ccode\u003E[5, 2]\u003C/code\u003E, and \u003Ccode\u003E[2, 3]\u003C/code\u003E form a cycle.\u003C/p\u003E\n\u003Cp\u003EThe double-path finder depth-first search approach runs as follows:&nbsp;\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003EBuild a graph adding \u003Cstrong\u003Eone edge at a time\u003C/strong\u003E using the provided array of edges.\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003EPrior to adding an edge\u003C/strong\u003E, run a dfs algorithm on the graph using the edge to see if there is a path that connects the \u003Ccode\u003Esource\u003C/code\u003E node to the \u003Ccode\u003Etarget\u003C/code\u003E node from the given edge; if such a path exists, then we will have two paths that lead from \u003Ccode\u003Esource\u003C/code\u003E to \u003Ccode\u003Etarget\u003C/code\u003E: the path that we just found via dfs, plus the direct path that will be formed by adding the given edge; which means that the given edge closes a cycle in the graph and, as a result, the graph contains a cycle.&nbsp;\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EThe below image shows the dpf dfs approach using an example graph:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/sjIG5m0.png-B8buhZNOgnyH2Ye\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EFrom the image, we start with \u003Ccode\u003En\u003C/code\u003E unconnected components, which, in this case, are 8 nodes (\u003Ccode\u003En = 8\u003C/code\u003E), as well as \u003Ccode\u003En\u003C/code\u003E edges, to be used for building the graph (\u003Cstrong\u003Estep 0\u003C/strong\u003E). Then we add edges to the graph one edge at a time. The goal of the approach is that, given edge \u003Ccode\u003E[a, b]\u003C/code\u003E, we want to know whether there already exists a path in the graph connecting nodes \u003Ccode\u003Ea\u003C/code\u003E and \u003Ccode\u003Eb\u003C/code\u003E (via dfs) before adding edge \u003Ccode\u003E[a, b]\u003C/code\u003E to the graph. For such a path to exist, \u003Cstrong\u003Eit is first required that both \u003C/strong\u003E\u003Ccode\u003E\u003Cstrong\u003Ea\u003C/strong\u003E\u003C/code\u003E\u003Cstrong\u003E and \u003C/strong\u003E\u003Ccode\u003E\u003Cstrong\u003Eb\u003C/strong\u003E\u003C/code\u003E\u003Cstrong\u003E have at least one edge each\u003C/strong\u003E (or, equivalently, one neighbor). Notice that from \u003Cstrong\u003Estep 1\u003C/strong\u003E to \u003Cstrong\u003Estep 4\u003C/strong\u003E, none of the nodes to be added have neighbors (edges). Take \u003Cstrong\u003Estep 3\u003C/strong\u003E as an example: before adding edge \u003Ccode\u003E[5, 6]\u003C/code\u003E, none of nodes \u003Ccode\u003E5\u003C/code\u003E and \u003Ccode\u003E6\u003C/code\u003E have neighbors (no connections), therefore we do not run dfs on edge \u003Ccode\u003E[5, 6]\u003C/code\u003E before adding edge \u003Ccode\u003E[5, 6]\u003C/code\u003E to the graph.\u003C/p\u003E\n\u003Cp\u003EWhen the nodes of a given edge each have neighbor(s) in the graph, we run dfs on the edge before adding the edge to the graph. Take \u003Cstrong\u003Estep 5\u003C/strong\u003E as an example: each of nodes \u003Ccode\u003E2\u003C/code\u003E and \u003Ccode\u003E4\u003C/code\u003E in edge \u003Ccode\u003E[2, 4]\u003C/code\u003E have one neighbor, so we run dfs using node \u003Ccode\u003E2\u003C/code\u003E as the \u003Ccode\u003Esource\u003C/code\u003E, and node \u003Ccode\u003E4\u003C/code\u003E as the \u003Ccode\u003Etarget\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003EIf, in the dfs process, we find a path that connects the nodes from the given edge, subsequently adding the given edge will close a cycle on the graph. If no path is found, we simply add the edge to the graph. For example, in \u003Cstrong\u003Estep 6\u003C/strong\u003E, running dfs of edge \u003Ccode\u003E[2, 5]\u003C/code\u003E before adding the \u003Ccode\u003E[2, 5]\u003C/code\u003E edge results in no path found connecting nodes \u003Ccode\u003E2\u003C/code\u003E and \u003Ccode\u003E5\u003C/code\u003E; then we add edge \u003Ccode\u003E[2, 5]\u003C/code\u003E to the graph. However, on \u003Cstrong\u003Estep 8\u003C/strong\u003E, running dfs of \u003Ccode\u003E[5, 7]\u003C/code\u003E results in a path found that connects nodes \u003Ccode\u003E5\u003C/code\u003E and \u003Ccode\u003E7\u003C/code\u003E, namely, the path passing through node \u003Ccode\u003E6\u003C/code\u003E; hence adding edge \u003Ccode\u003E[5, 7]\u003C/code\u003E will result in a cycle being closed at that edge.&nbsp;\u003C/p\u003E\n\u003Cp\u003EOk, let's now put all of this into code.\u003C/p\u003E\n\u003Ch2\u003ECoded Solution\u003C/h2\u003E\n\u003Cp\u003EThe code implementation is presented below:\u003C/p\u003E\n\u003Cpre\u003E```javascript+lines\u003Cbr\u003Efunction findRedundantConnection(edges) {\u003Cbr\u003E  const max_nodes = 1000;\u003Cbr\u003E  const graph = new Array(max_nodes + 1).fill(0).map(() =&gt; []);\u003Cbr\u003E  let visited;\u003Cbr\u003E\u003Cbr\u003E  for (let [u, v] of edges) {\u003Cbr\u003E    visited = new Set();\u003Cbr\u003E    if (graph[u].length &amp;&amp; graph[v].length &amp;&amp; dfs(u, v)) {\u003Cbr\u003E      return [u, v];\u003Cbr\u003E    }\u003Cbr\u003E    graph[u].push(v);\u003Cbr\u003E    graph[v].push(u);\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  function dfs(src, target) {\u003Cbr\u003E    if (!visited.has(src) {\u003Cbr\u003E      visited.add(src);\u003Cbr\u003E      if (src === target) return true;\u003Cbr\u003E      for (let neighbor of graph[src]) {\u003Cbr\u003E        if (dfs(neighbor, target)) return true;\u003Cbr\u003E      }\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E};\u003C/pre\u003E\n\u003Cp\u003EWe use an array to represent the graph (line 3), where the indices of the array represent the vertices (or nodes) of the graph, and the array values represent the nodes' neighbors, initialized as empty arrays. The maximum number of nodes allowed in the problem is 1000, so we use an array of length 1001 to cover all possible cases.&nbsp;\u003C/p\u003E\n\u003Cp\u003EPrior to building the edges of the graph (lines 11 and 12), we first check whether we can run a dfs algorithm on the given edge (line 8); the dfs algorithm returns \u003Ccode\u003Etrue\u003C/code\u003E if it finds a path that starts at \u003Ccode\u003Esrc\u003C/code\u003E, running through \u003Ccode\u003Esrc\u003C/code\u003E's neighbor or \u003Ccode\u003Esrc\u003C/code\u003E neighbor's neighbor and ends at \u003Ccode\u003Etarget\u003C/code\u003E. Otherwise, the dfs algorithm returns \u003Ccode\u003Efalse\u003C/code\u003E. We also initialize a new set at the start of every edge iteration (line 7) to be used by the dfs algorithm.\u003C/p\u003E\n\u003Cp\u003EThe problem guarantees that the graph contains at least one cycle; hence, at some point, the dfs algorithm will return \u003Ccode\u003Etrue\u003C/code\u003E and, at that point, we return the given edge as the final answer as that edge forms a cycle and can be removed.&nbsp;\u003C/p\u003E\n\u003Ch2\u003ETime Complexity and Space Complexity\u003C/h2\u003E\n\u003Cp\u003ENotice that, in the event of one cycle in the graph found at the last edge of the graph, the dfs function will be called for every node on the graph at least once \u003Cstrong\u003Eand\u003C/strong\u003E, for every node, the node's neighbors will be visited at most once. This gives us an \u003Cstrong\u003Eoverall time complexity\u003C/strong\u003E of \u003Cstrong\u003EO(V + E)\u003C/strong\u003E, where V is the number of nodes, and E is the number of edges.&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe length of the array used to represent the graph will be equal to the number of nodes, taking O(V) space \u003Cstrong\u003Eand\u003C/strong\u003E, for every node, the node's neighbors are added to an array, taking O(2E) space (undirected graphs contain bidirectional edges). Hence, the \u003Cstrong\u003Eoverall space complexity\u003C/strong\u003E for the algorithm is O(V + 2E), which reduces to \u003Cstrong\u003EO(V + E)\u003C/strong\u003E.\u003C/p\u003E\n\u003Ch2\u003ESummary\u003C/h2\u003E\n\u003Cp\u003EOne way of detecting cycles in an undirected graph is through depth-first search (dfs). For a given \u003Ccode\u003E[source, target]\u003C/code\u003E edge, the dfs can be tuned to detect whether a path between the \u003Ccode\u003Esource\u003C/code\u003E node and \u003Ccode\u003Etarget\u003C/code\u003E node exists in the graph before adding the \u003Ccode\u003E[source, target]\u003C/code\u003E edge to the graph. If such a path exists, a cycle has been found.&nbsp;\u003C/p\u003E\n\u003Cp\u003EAnswer to the icebreaker question: yes, the image represents an undirected graph, with a cycle formed among nodes \u003Ccode\u003E[1, 2, 3, 4]\u003C/code\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Jan 9, 2023",
    "images": [
      {
        "id": 94,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "cover_image_undirected graphs_part1.png",
        "s3key": null,
        "size": 23289,
        "url": "https://i.imgur.com/E1FDZ6U.png"
      }
    ],
    "status": "published",
    "title": "Undirected Graph Cycle Detection, Part I: Double-Path Finder Depth-First Search Algorithm",
    "url": "luismartinez/undirected-graph-cycle-detection-part-i-double-path-finder-depth-first-search-algorithm-cec6209c2d",
    "user_id": 1
  },
  {
    "id": 242,
    "abstract": "In the previous post of this series we discussed how to use depth-first search (DFS) for detecting cycles in a directed graph, as well as returning a topological sort for the graph when no cycles are found. In this post we'll discuss a breadth-first search (BFS) approach to cycle detection in directed graphs.",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EDirected Graph Cycle Detection, Part II: Breadth-First Search–Khan's Algorithm\u003C/h1\u003E\n\u003Cp\u003EIn the previous post of this series we discussed how to use depth-first search (DFS) for detecting cycles in a directed graph, as well as returning a topological sort for the graph when no cycles are found. In this post we'll discuss a breadth-first search (BFS) approach to cycle detection in directed graphs.\u003C/p\u003E\n\u003Cp\u003EIcebreaker: the graph in the image contains a cycle; can you tell where the cycle is found?\u003C/p\u003E\n\u003Ch2\u003EBackground\u003C/h2\u003E\n\u003Cp\u003ESimilar to the part I post, \u003Ca href=\"https://devblog.dev/luismartinez/directed-graph-cycle-detection-part-i-depth-first-search-algorithm-f5555345d0\" target=\"_blank\"\u003E\u003Cem\u003EDirected Graph Cycle Detection: Depth-First Search Algorithm\u003C/em\u003E\u003C/a\u003E, we'll have a directed graph represented by a course schedule with prerequisites (as in LeetCode's \u003Ca href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\"\u003ECourse Schedule II problem\u003C/a\u003E). We want to know whether it is possible to complete all the courses in the schedule and, if so, return a valid order to take the courses in. To solve this problem we'll use what is known as \u003Cstrong\u003E\u003Cem\u003EKhan's algorithm\u003C/em\u003E\u003C/strong\u003E, an algorithm that utilizes \u003Cstrong\u003Ebreadth-first search\u003C/strong\u003E \u003Cstrong\u003E(bfs) \u003C/strong\u003Eto determine the topological sort in a directed graph, and detect cycles (if an ordering is not possible).&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's consider the below directed graph:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/ul2obiy.png-lIB1XEaDUm2IF0T\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EConsider the number of \u003Cstrong\u003Edependencies\u003C/strong\u003E for each of the vertices in the graph or, equivalently, the \u003Cstrong\u003Eindegree value\u003C/strong\u003E for the vertices: vertex A has \u003Cstrong\u003E0\u003C/strong\u003E dependencies (no arrows coming in to A; \u003Cstrong\u003Eindegree 0\u003C/strong\u003E); vertices C and B each have \u003Cstrong\u003E1\u003C/strong\u003E dependency (\u003Cstrong\u003Eindegree 1\u003C/strong\u003E), and vertex D has \u003Cstrong\u003E2\u003C/strong\u003E dependencies (\u003Cstrong\u003Eindegree 2\u003C/strong\u003E). It turns out that the indegree value of a vertex is an indication of the order in which the vertex should be visited: vertices with lower indegree values are visited first, then vertices with higher indegree values. If the previous graph represented a course schedule, we could easily deduct the \u003Cstrong\u003Etwo possible valid orders\u003C/strong\u003E in which to take the courses just by looking at the dependencies of the courses: [A, C, B, D], and [A, B, C, D].&nbsp;\u003C/p\u003E\n\u003Cp\u003EThis leads us to the following approach to Khan's algorithm: Given an array of \u003Cstrong\u003Ecourse prerequisites\u003C/strong\u003E representing the \u003Cstrong\u003Eedges\u003C/strong\u003E of a directed graph, and given a total of \u003Ccode\u003EnumCourses\u003C/code\u003E, where courses run from \u003Ccode\u003E0\u003C/code\u003E to \u003Ccode\u003EnumCourses - 1\u003C/code\u003E, we'll initialize an \u003Ccode\u003Eindegree\u003C/code\u003E array containing all the courses, each course initially with \u003Cstrong\u003E0 dependencies\u003C/strong\u003E (\u003Cstrong\u003Eindegree 0\u003C/strong\u003E). Then we'll iterate over the \u003Ccode\u003Eprerequisites\u003C/code\u003E array to build a directed graph and, at the same time, increment the \u003Cstrong\u003Eindegree value\u003C/strong\u003E for the \u003Cstrong\u003Edestination courses\u003C/strong\u003E in the \u003Ccode\u003Eindegree\u003C/code\u003E array using the graph edges. We'll then push the courses with indegree 0 to a \u003Ccode\u003Equeue\u003C/code\u003E to be used by a \u003Cstrong\u003Ebreadth-first search (bfs) algorithm\u003C/strong\u003E \u003Cstrong\u003Ein\u003C/strong\u003E \u003Cstrong\u003Eiterative form\u003C/strong\u003E. In the bfs algorithm we'll dequeue the first value and iterate over the course's neighbors to decrement the indegree value of the neighbors by 1, as the current course has been dequeued and will not be seen again. If, in this process, a neighbor reaches indegree 0, we'll push it to the \u003Ccode\u003Equeue\u003C/code\u003E for processing. This way, courses will be visited in a valid order. At the end of the bsf iteration, we'll push the course to an output array. If, at the end of the bfs process (when the \u003Ccode\u003Equeue\u003C/code\u003E is empty), the ouput array is empty or does not contain all the courses, it means there was no course with indegree 0 initially (because of cycles) or a cycle was found at some point later in the graph traversal which prevented collecting the courses that formed part of a cycle.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's apply the previous approach to the below graph:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/YflD0Cg.png-MNlYWrxe9slhB8t\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EFrom the graph, vertex A has \u003Cstrong\u003Eindegree 0\u003C/strong\u003E, vertex G has \u003Cstrong\u003Eindegree 2\u003C/strong\u003E, and the remainder vertices have \u003Cstrong\u003Eindegree 1\u003C/strong\u003E each. We can take course A (it is the only course with indegree 0 initially), which will make the indegree value of vertex G to decrease to 1, but then, the remainder courses cannot be taken because course G never reaches indegree 0 due to a cycle closing at G: Since not all the courses can be taken, the graph contains a cycle.\u003C/p\u003E\n\u003Ch2\u003ESolution: Cycle Detection plus Topological Sort\u003C/h2\u003E\n\u003Cp\u003ELet's put into code the previous approach to Khan's algorithm:\u003C/p\u003E\n\u003Cpre\u003E```javascript+lines\u003Cbr\u003Efunction findOrder(numCourses, prerequisites) {\u003Cbr\u003E  const indegree = [...Array(numCourses).fill(0)];\u003Cbr\u003E  const graph = new Map();\u003Cbr\u003E  const queue = [];\u003Cbr\u003E  const order = [];\u003Cbr\u003E\u003Cbr\u003E  for(let [crs, pre] of prerequisites) {\u003Cbr\u003E    if(graph.has(pre)) {\u003Cbr\u003E      graph.get(pre).push(crs);\u003Cbr\u003E    } else {\u003Cbr\u003E      graph.set(pre, [crs]);\u003Cbr\u003E    }\u003Cbr\u003E    indegree[crs]++;\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  for(let i = 0; i &lt; numCourses; i++) {\u003Cbr\u003E    if(indegree[i] === 0) queue.push(i);\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  // breadth-first search, iterative\u003Cbr\u003E  while(queue.length) {\u003Cbr\u003E    const current = queue.shift();\u003Cbr\u003E    for(let neighbor of (graph.get(current) || [])) {\u003Cbr\u003E      indegree[neighbor]--;\u003Cbr\u003E      if(indegree[neighbor] === 0) queue.push(neighbor);    \u003Cbr\u003E    }\u003Cbr\u003E    order.push(current);\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  return numCourses === order.length ? order : [];\u003Cbr\u003E};\u003C/pre\u003E\n\u003Cp\u003EIn the above algorithm, the indices of the \u003Ccode\u003Eindegree\u003C/code\u003E array (line 2) represent the courses, running from \u003Ccode\u003E0\u003C/code\u003E to \u003Ccode\u003EnumCourses - 1\u003C/code\u003E. The graph is built on line 7, courses with indegree 0 are enqueued on line 15; neighbor courses that reach indegree 0 during the bfs process are enqueued on line 25, and the topological sort collection to be returned by the algorithm occurs on line 27.\u003C/p\u003E\n\u003Ch2\u003ESolution: Cycle Detection Only\u003C/h2\u003E\n\u003Cp\u003EIf we were only interested in determining whether the graph contains a cycle, and leave out the topological sort (ordering) part, we would then need to design an algorithm that returns a boolean instead an array. It turns out that we can use the previous section's algorithm as is, and only need to change one line of code, the \u003Ccode\u003Ereturn\u003C/code\u003E line (line 30), to make the algorithm work in cycle detection mode only:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E  return numCourses === order.length ? true : false;\u003C/pre\u003E\n\u003Cp\u003Eand that suffices the requirement.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's move on to time and space complexity analysis.\u003C/p\u003E\n\u003Ch2\u003ETime Complexity\u003C/h2\u003E\n\u003Cp\u003EBuilding the graph out of the \u003Ccode\u003Eprerequisites\u003C/code\u003E array takes \u003Cstrong\u003EO(E)\u003C/strong\u003E time, as we iterate over \u003Cstrong\u003Eall the edges\u003C/strong\u003E of the graph in the \u003Ccode\u003Eprerequisites\u003C/code\u003E array, where E is the number the number of prerequisites.&nbsp;\u003C/p\u003E\n\u003Cp\u003EAssigning indegree values to the courses takes \u003Cstrong\u003EO(V)\u003C/strong\u003E time, as we iterate over \u003Cstrong\u003Eall the courses\u003C/strong\u003E, where V is the number of courses.&nbsp;\u003C/p\u003E\n\u003Cp\u003EA worst-case scenarios for the while loop (line 21) in the solution algorithm would be that all courses except for one course have one or more dependencies (prerequisites), and that there are no cycles. Hence the loop will iterate over \u003Cstrong\u003Eall the courses\u003C/strong\u003E at most once, thus taking \u003Cstrong\u003EO(V)\u003C/strong\u003E time and, additionally, for each course, the course's \u003Cstrong\u003Eneighbors\u003C/strong\u003E or, equivalently, the \u003Cstrong\u003Eedges \u003C/strong\u003Eare processed for indegree decrement (in the for loop on line 23), hence \u003Cstrong\u003Eprocessing\u003C/strong\u003E \u003Cstrong\u003Eall edges\u003C/strong\u003E and thus taking \u003Cstrong\u003EO(E)\u003C/strong\u003E time. As a result, the algorithm's overall time complexity is \u003Cstrong\u003EO(V + E)\u003C/strong\u003E.\u003C/p\u003E\n\u003Ch2\u003ESpace Complexity\u003C/h2\u003E\n\u003Cp\u003EBuilding the graph out of the prerequisites array takes \u003Cstrong\u003EO(E)\u003C/strong\u003E space as we iterave over all the prerequisites, while building the \u003Ccode\u003Eindegree\u003C/code\u003E array takes \u003Cstrong\u003EO(V)\u003C/strong\u003E space. Hence the overall space complexity for the solution algorithm is \u003Cstrong\u003EO(V + E)\u003C/strong\u003E.\u003C/p\u003E\n\u003Ch2\u003ESummary\u003C/h2\u003E\n\u003Cp\u003ETwo common methods for cycle detection in directed graphs are depth-first search (dfs), and breadth-first search (bfs). The indegree value of a vertex is an indicator of the relative order in which the vertex should be visited, and Khan's bfs algorithm leverages this fact to collect the vertices in a valid order and, thus, return a topological sort for the graph, or detect cycles if not all vertices can be collected.\u003C/p\u003E\n\u003Cp\u003EAnswer to icebreaker: the cycle is found among vertices \u003Ccode\u003E[5, 8, 7]\u003C/code\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Jan 4, 2023",
    "images": [
      {
        "id": 95,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "cover_image_directed_graph_khans_algorithm.png",
        "s3key": null,
        "size": 200013,
        "url": "https://i.imgur.com/mm0UvNl.png"
      }
    ],
    "status": "published",
    "title": "Directed Graph Cycle Detection, Part II: Breadth-First Search–Khan's Algorithm",
    "url": "luismartinez/directed-graph-cycle-detection-part-ii-breadth-first-search-khan-s-algorithm-6d9c2e3c1f",
    "user_id": 1
  },
  {
    "id": 236,
    "abstract": "Given a directed graph, how can we determine whether there exists a cycle in the graph? There are several methods that can be used to answer this question. In this post, we are going to explore a depth-first-search approach to solving such a problem.",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EDirected Graph Cycle Detection, Part I:   Depth-First Search Algorithm\u003C/h1\u003E\n\u003Cp\u003EGiven a directed graph, how can we determine whether there exists a cycle in the graph? There are several methods that can be used to answer this question. In this post, we are going to explore a depth-first-search approach to solving such a problem.\u003C/p\u003E\n\u003Cp\u003EIcebreaker: can you spot where the cycle is found in the above graph?\u003C/p\u003E\n\u003Ch2\u003EBackground\u003C/h2\u003E\n\u003Cp\u003EOne scenario for cycle detection in a directed graph is a course schedule sequence with prerequisites. This scenario is presented in LeetCode's \u003Ca href=\"https://leetcode.com/problems/course-schedule-ii/\" target=\"_blank\"\u003ECourse Schedule II  problem\u003C/a\u003E, which consists in determining whether it is possible to finish all courses in a course schedule with prerequisites and, if so, return a valid sequence for the courses. Let's illustrate the problem with an example: say we have a course schedule with four courses: A, B, C, and D, where A is prerequisite of B and C, and C and B are prerequisites of D. We can represent the course sequence and the prerequisites with the following directed graph:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/Ur6YlrF.png-W2nB8gR9enr7fNp\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EAs seen in the graph, all courses can be completed, starting from course A (the valid sequences are [A, C, B, D] and [A, B, C, D]). Now let's add one more prerequisite: D is prerequisite of A (that is, to take course A you need to complete course D first). The graph will now look as follows:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/GSuIniv.png-UPvYtxw3EoQmEdG\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EIf we start at A, running the path through either C or B will takes us back to A, so there is no way of completing all courses because there is a cycle where course D requires course A (indirectly), and course A requires course D (directly).&nbsp;\u003C/p\u003E\n\u003Cp\u003EIn the above graph, it is easy to see that there is at least one cycle; however, when we have a graph with hundreds of vertices, it would be hard to determine whether there is a cycle visually. So we are going to use a depth-first search (dfs) approach for cycle detection in directed graphs. Let's explain the approach using the first graph above as an example:\u003C/p\u003E\n\u003Cp\u003EWe are going to mark all the vertices of the graph (A, B, C, and D) as \u003Cstrong\u003E\u003Cem\u003Eunvisited\u003C/em\u003E\u003C/strong\u003E initially. Then we are going to iterate over the source vertices one at a time using a dfs algorithm. At the start of the dfs, we are going to mark the corresponding vertex as \u003Cstrong\u003E\u003Cem\u003Evisiting\u003C/em\u003E\u003C/strong\u003E, and when the dfs for the given vertex is over, that is, when the vertex's neighbors have been processed or the vertex does not have neighbors, we are going to mark the vertex as \u003Cstrong\u003E\u003Cem\u003Edone\u003C/em\u003E\u003C/strong\u003E. If, while the dfs algorithm is running for a given vertex, there exists a path through the vertex's neighbor(s) that leads back to the vertex, then the graph contains a cycle.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's now apply the previous approach to the first graph:\u003Cbr\u003EAll vertices are initially marked as \u003Ccode\u003Eunvisited\u003C/code\u003E. Starting a dfs algorithm at vertex A, vertex A is marked as \u003Ccode\u003Evisiting\u003C/code\u003E; then dfs for vertex C  runs, and it is marked as \u003Ccode\u003Evisiting\u003C/code\u003E; then dfs for vertex D runs, and D is marked as \u003Ccode\u003Evisiting\u003C/code\u003E; since D does not have neighbors, dfs for D concludes, and it is marked as \u003Ccode\u003Edone\u003C/code\u003E; since C does not have more neighbors, dfs for C concludes, and it's status is changed from \u003Ccode\u003Evisiting\u003C/code\u003E to \u003Ccode\u003Edone\u003C/code\u003E; now dfs for the second neighbor of A, namely, B, runs, and B is marked as \u003Ccode\u003Evisiting\u003C/code\u003E; since the only neighbor of B, namely, D, is \u003Ccode\u003Edone\u003C/code\u003E, dfs for B concludes and it is marked as \u003Ccode\u003Edone\u003C/code\u003E; finally, A is marked as \u003Ccode\u003Edone\u003C/code\u003E. If we were to collect the courses at the end of the dfs calls we would get the sequence [D, C, B, A]. Note that this sequence is in \u003Cstrong\u003Ereverse order\u003C/strong\u003E from the true order when taking the courses (this fact will be later used in the coded solution).\u003C/p\u003E\n\u003Cp\u003EIf we carry out a similar analysis for the second graph above, we get:\u003C/p\u003E\n\u003Cpre\u003EA visiting -&gt; then B visiting -&gt; then D visiting -&gt; then A visiting\u003C/pre\u003E\n\u003Cp\u003ENotice that we were still processing (visiting) A, and we encountered A again, which means the graph contains a cycle closing at vertex A.&nbsp;\u003C/p\u003E\n\u003Cp\u003EFor the code representation of the above approach, we are going to use codes to represent the states of a vertex: 0 for \u003Ccode\u003Eunvisited\u003C/code\u003E, 1 for \u003Ccode\u003Evisiting\u003C/code\u003E, and 2 for \u003Ccode\u003Edone\u003C/code\u003E. Also, the givens for the problem will be the total number of courses (\u003Ccode\u003EnumCourses\u003C/code\u003E) starting at course 0 until \u003Ccode\u003EnumCourses - 1\u003C/code\u003E, and an array of \u003Ccode\u003Eprerequisites\u003C/code\u003E, where \u003Ccode\u003Eprerequisites[i] = [x,y]\u003C/code\u003E, where \u003Ccode\u003Ey\u003C/code\u003E is a prerequisite of \u003Ccode\u003Ex\u003C/code\u003E, or \u003Ccode\u003Ey\u003C/code\u003E leads to \u003Ccode\u003Ex \u003C/code\u003E(\u003Ccode\u003Ey -&gt; x\u003C/code\u003E).&nbsp;&nbsp;\u003C/p\u003E\n\u003Ch2\u003ESolution: Cycle Detection plus Ordering\u003C/h2\u003E\n\u003Cp\u003EBefore writing the solution, let's note that, given n courses with no prerequisites, means that the courses can be taken in any order, and the answer will be an array containing all the courses. When provided with prerequisites, we'll use the prerequisites to build a directed graph and implement a dfs algorithm on the graph to find whether there is a cycle in the graph. This means that given n courses, there can be less prerequisites than courses, but we need to return all the courses with the prerequisites included in a valid order (sequence).&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's dive into the code:\u003C/p\u003E\n\u003Cpre\u003E```javascript+lines\u003Cbr\u003Econst UNVISITED = 0;\u003Cbr\u003Econst VISITING = 1;\u003Cbr\u003Econst DONE = 2;\u003Cbr\u003E\u003Cbr\u003Efunction findOrder(numCourses, prerequisites) {\u003Cbr\u003E  let graph = new Map();\u003Cbr\u003E  let order = [];\u003Cbr\u003E  let cycle = false;\u003Cbr\u003E  const status = new Array(numCourses).fill(UNVISITED);\u003Cbr\u003E \u003Cbr\u003E  for(let [dest, source] of prerequisites) {\u003Cbr\u003E    graph.has(source) \u003Cbr\u003E      ? graph.get(source).push(dest) \u003Cbr\u003E      : graph.set(source, [dest]);\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  for(let i = 0; i &lt; numCourses; i++) {\u003Cbr\u003E    if(status[i] === UNVISITED) {\u003Cbr\u003E      dfs(i);\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  let final = [];\u003Cbr\u003E  if(!cycle) {\u003Cbr\u003E    for(let i=0; i &lt; numCourses; i++){     \u003Cbr\u003E      final[i] = order[numCourses - i - 1];\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  return final;\u003Cbr\u003E\u003Cbr\u003E  function dfs(course) {\u003Cbr\u003E    if(cycle) return;\u003Cbr\u003E    status[course] = VISITING;\u003Cbr\u003E    for(let neighbor of (graph.get(course) || [])) {\u003Cbr\u003E      if(status[neighbor] === UNVISITED) {\u003Cbr\u003E        dfs(neighbor);\u003Cbr\u003E      } else if(status[neighbor] === VISITING) {\u003Cbr\u003E        cycle = true;\u003Cbr\u003E      }\u003Cbr\u003E    }\u003Cbr\u003E    status[course] = DONE;\u003Cbr\u003E    order.push(course);\u003Cbr\u003E  }\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EOn line 9 we initialize a \u003Ccode\u003Estatus\u003C/code\u003E array containing all courses (the array's indices represent the courses), each with a status of \u003Ccode\u003E0\u003C/code\u003E (or \u003Ccode\u003Eunvisited\u003C/code\u003E) initially. We then build a graph using the \u003Ccode\u003Eprerequisites\u003C/code\u003E array (line 11). Since we need to return all courses (if no cycle found), we iterate over all the courses (line 17), and run a dfs algorithm for \u003Ccode\u003Eunvisited\u003C/code\u003E courses (line 19). The dfs algorithm immediately pushes the passed-in course (after changing the course status) to the \u003Ccode\u003Eorder\u003C/code\u003E array if the course does not belong to the graph or if the course belongs to the graph and does not have neighbors (line 43). Otherwise, the course's neighbors are processed (line 35). If a course is in \u003Ccode\u003Evisiting\u003C/code\u003E state and a neighbor's path leads back to such course, a cycle has been found.&nbsp;\u003C/p\u003E\n\u003Cp\u003EIf no cycle is found after iterating over all the courses, we iterate over the \u003Ccode\u003Eorder\u003C/code\u003E array (line 25) to collect the courses in the true order since the dfs algorithm collects the courses in reverse order (this was discussed in background section). Otherwise if a cycle is found, we return an empty array.\u003C/p\u003E\n\u003Ch2\u003ESolution: Cycle Detection Only\u003C/h2\u003E\n\u003Cp\u003EIf we did not care about the order of the courses, and we only wanted to find whether the \u003Ccode\u003Eprerequisites\u003C/code\u003E array contains a cycle (LeetCode's \u003Ca href=\"https://leetcode.com/problems/course-schedule/description/\" target=\"_blank\"\u003ECourse Schedule\u003C/a\u003E  problem), we can then use the following approach to solve:\u003C/p\u003E\n\u003Cp\u003EBuild a graph out of the \u003Ccode\u003Eprerequisites\u003C/code\u003E array, and run a dfs algorithm on every source vertex (node) of the graph. We'll initialize two sets, \u003Ccode\u003Evisited\u003C/code\u003E and \u003Ccode\u003Eexploring\u003C/code\u003E, to keep track of the courses fully processed, and the courses being processed, respectively. The dfs algorithm returns a boolean: \u003Ccode\u003Etrue\u003C/code\u003E if a cycle is found, and \u003Ccode\u003Efalse\u003C/code\u003E otherwise. At the start of the dfs call, we'll check whether the current course is already being explored from a \u003Cstrong\u003Eprevious dfs call\u003C/strong\u003E, if so, we'll return \u003Ccode\u003Etrue\u003C/code\u003E, as a cycle is closed at that course; otherwise, we'll check whether the current course has already been visited; if so, we'll return \u003Ccode\u003Efalse\u003C/code\u003E to exit the dfs call and continue exploring with the next course; if the current course has not been visited, we'll start exploring the course and its neighbors. When done exploring, we'll remove the course from the \u003Ccode\u003Eexploring\u003C/code\u003E set, then add it to the \u003Ccode\u003Evisited\u003C/code\u003E set, and return \u003Ccode\u003Efalse\u003C/code\u003E as no cycle was found during the dfs call.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's write the code implementation:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Efunction canFinish(numCourses, prerequisites) {\u003Cbr\u003E  let graph = new Map();\u003Cbr\u003E  let visited = new Set();\u003Cbr\u003E  let exploring = new Set();\u003Cbr\u003E \u003Cbr\u003E  for(let [dest, src] of prerequisites) {\u003Cbr\u003E    graph.has(src) \u003Cbr\u003E      ? graph.get(src).push(dest) \u003Cbr\u003E      : graph.set(src, [dest]);\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  for(let course of [...graph.keys()]) {\u003Cbr\u003E    if(dfs(course)) return false;\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  return true;\u003Cbr\u003E\u003Cbr\u003E  function dfs(crs) {\u003Cbr\u003E    if(exploring.has(crs)) return true;\u003Cbr\u003E    if(visited.has(crs)) return false;\u003Cbr\u003E    exploring.add(crs);\u003Cbr\u003E    for(let neighbor of (graph.get(crs) || [])) {\u003Cbr\u003E      if(dfs(neighbor)) return true;\u003Cbr\u003E    }\u003Cbr\u003E    exploring.delete(crs);\u003Cbr\u003E    visited.add(crs);\u003Cbr\u003E    return false;\u003Cbr\u003E  }\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EThe key point in the solution is that the dfs algorithm returns a boolean.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's now proceed to analyze the time and space complexity for the solutions.\u003C/p\u003E\n\u003Ch2\u003ETime Complexity\u003C/h2\u003E\n\u003Cp\u003E\u003Cstrong\u003EFor the first solution\u003C/strong\u003E, a worst-case scenario in the problem would be that all the courses except for one have one or more prerequisites. This would make all the courses to be included in the \u003Ccode\u003Eprerequisites\u003C/code\u003E array. Each ordered pair in the \u003Ccode\u003Eprerequisites\u003C/code\u003E array represents a unique \u003Cstrong\u003Eedge\u003C/strong\u003E for the subsequent directed graph. Hence, building the directed graph out of the \u003Ccode\u003Eprerequisites\u003C/code\u003E array takes \u003Cstrong\u003EO(E)\u003C/strong\u003E time, where E is the total number of edges of the graph (or, equivalently, the length of the \u003Ccode\u003Eprerequisites\u003C/code\u003E array) as we loop over \u003Cstrong\u003Eall the edges\u003C/strong\u003E, and the \u003Ccode\u003Eset\u003C/code\u003E and \u003Ccode\u003Epush\u003C/code\u003E operations on the edges take O(1) time.&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe initialization operation for setting the status of the vertices of the graph, that is, marking the vertices as \u003Ccode\u003Eunvisited\u003C/code\u003E initially, takes \u003Cstrong\u003EO(V) \u003C/strong\u003Etime, where V is the number of vertices of the graph (or, equivalently, the total number of courses), as we loop over \u003Cstrong\u003Eall the courses\u003C/strong\u003E.&nbsp;\u003C/p\u003E\n\u003Cp\u003EFor time complexity purposes, the most relevant operation in the dfs function in the solution is the \u003Cstrong\u003Efor loop\u003C/strong\u003E. For a given vertex, the for loop visits each of the vertex's neighbors or, equivalently, the edges for the vertex. Since the dfs function will be called for\u003Cstrong\u003E every vertex\u003C/strong\u003E in the graph (at most once), the for loop will visit \u003Cstrong\u003E\u003Cem\u003Eevery edge on the graph\u003C/em\u003E\u003C/strong\u003E, hence the time complexity for the dfs function is O(E), where E is the total number of edges in the graph.&nbsp;\u003C/p\u003E\n\u003Cp\u003ECombining the time complexity for the vertices initialization and the time complexity for the dfs function we get an overall time complexity of \u003Cstrong\u003EO(V + E)\u003C/strong\u003E for the solution algorithm.\u003C/p\u003E\n\u003Ch2\u003ESpace Complexity\u003C/h2\u003E\n\u003Cp\u003EFor the space complexity, building the adjacency list graph with a hashmap takes \u003Cstrong\u003EO(E)\u003C/strong\u003E space, where E is the number of edges. Since we are using recursion to solve, in the worst case scenario of the prerequisites being linearly chained, the call stack for the dfs function would grow to size V, the number of courses, hence, taking \u003Cstrong\u003EO(V)\u003C/strong\u003E space.&nbsp;\u003C/p\u003E\n\u003Cp\u003EAlso, the \u003Ccode\u003Estatus\u003C/code\u003E array used to keep track of the status of the vertices takes O(V) space.\u003C/p\u003E\n\u003Cp\u003EAs a result, the overall space complexity for the algorithm is \u003Cstrong\u003EO(V + E)\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003ESince the second solution also involves an adjacency list directed graph with dfs, the time and space complexity for the solution algorithm are both \u003Cstrong\u003EO(V + E)\u003C/strong\u003E.\u003C/p\u003E\n\u003Ch2\u003EOptimization\u003C/h2\u003E\n\u003Cp\u003EIn the first solution the algorithm continues to loop through the remainder courses even after finding a cycle. We can improve the time complexity of the algorithm a bit by having it return immediately after finding a cycle. For this, we need to refactor the dfs function to return a boolean instead of not returning anything. Also, rather than keeping three states for the courses (\u003Ccode\u003Eunvisited\u003C/code\u003E, \u003Ccode\u003Evisiting\u003C/code\u003E, and \u003Ccode\u003Edone\u003C/code\u003E), we'll only keep two states (\u003Ccode\u003Eprocessing\u003C/code\u003E, and \u003Ccode\u003Evisited\u003C/code\u003E), and we'll keep track of these states in two separate hashmaps or sets, respectively. The \u003Ccode\u003Evisited\u003C/code\u003E state will be stored globally in the algorithm, while the \u003Ccode\u003Eprocessing\u003C/code\u003E state will be reinitialized at the end of the dfs calls. Introducing these changes yields a solution very similar to the second solution presented previously:\u003C/p\u003E\n\u003Cpre\u003E```javascript+lines\u003Cbr\u003Efunction findOrder(numCourses, prerequisites) {\u003Cbr\u003E  let graph = new Map();\u003Cbr\u003E  let order = [];\u003Cbr\u003E  const [visit, cycle] = [new Set(), new Set()];\u003Cbr\u003E\u003Cbr\u003E  for(let [dest, src] of prerequisites) {\u003Cbr\u003E    graph.has(src) \u003Cbr\u003E      ? graph.get(src).push(dest) \u003Cbr\u003E      : graph.set(src, [dest]);\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  for(let i = 0; i &lt; numCourses; i++) {\u003Cbr\u003E    if(dfs(i)) return [];\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  let final = [];\u003Cbr\u003E  for(let i = 0; i &lt; numCourses; i++) {\u003Cbr\u003E    final[i] = order[numCourses - i - 1];\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  return final;\u003Cbr\u003E\u003Cbr\u003E  function dfs(course) {\u003Cbr\u003E    if(cycle.has(course)) return true;\u003Cbr\u003E    if(visit.has(course)) return false;\u003Cbr\u003E    cycle.add(course);\u003Cbr\u003E    for(let neighbor of graph.get(course) || []) {\u003Cbr\u003E      if(dfs(neighbor)) return true;\u003Cbr\u003E    }\u003Cbr\u003E    cycle.delete(course);\u003Cbr\u003E    visit.add(course);\u003Cbr\u003E    order.push(course);\u003Cbr\u003E    return false;\u003Cbr\u003E  }\u003Cbr\u003E};\u003C/pre\u003E\n\u003Cp\u003EIn the dfs function, the current course is marked as \u003Ccode\u003Eprocessing\u003C/code\u003E at the start of the function by adding it to the \u003Ccode\u003Ecycle\u003C/code\u003E set (line 26), and later marked as \u003Ccode\u003Evisited\u003C/code\u003E at the end of the function by adding it to the \u003Ccode\u003Evisit\u003C/code\u003E set (line 31); since by this time the course has been processed, the course is removed from the \u003Ccode\u003Ecycle\u003C/code\u003E set (line 30). Compared to the previous solution we get extra speed at the tradeoff of extra space with the addition of the \u003Ccode\u003Ecycle\u003C/code\u003E set.\u003C/p\u003E\n\u003Ch2\u003ESummary\u003C/h2\u003E\n\u003Cp\u003EOne way of detecting cycles in a directed graph is by using a depth-first search algorithm. If we also want to return a valid order of traversing the graph (also know as topological sort), we need to reverse the order of the vertices collected during the dfs process, as vertices to be visited last are collected first during dfs.&nbsp;\u003C/p\u003E\n\u003Cp\u003EAnswer to the icebreaker: the cycle is found among vertices \u003Ccode\u003E[D, G, F, J]\u003C/code\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Dec 29, 2022",
    "images": [
      {
        "id": 96,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "cover_image_Directed graph cycle.png",
        "s3key": null,
        "size": 26148,
        "url": "https://i.imgur.com/lIuX0R4.png"
      }
    ],
    "status": "published",
    "title": "Directed Graph Cycle Detection, Part I:   Depth-First Search Algorithm",
    "url": "luismartinez/directed-graph-cycle-detection-part-i-depth-first-search-algorithm-f5555345d0",
    "user_id": 1
  },
  {
    "id": 234,
    "abstract": "In the previous post of this series, ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EDesigning Wordie: Wordie Clone DSA, Part II: Data Implementation\u003C/h1\u003E\n\u003Cp\u003EIn the previous post of this series, \u003Ca href=\"https://devblog.dev/luismartinez/designing-wordle-wordle-clone-dsa-part-i-data-architecture-6defbeea\" target=\"_blank\"\u003E\u003Cem\u003EDesigning Wordie: Wordie Clone DSA Part I: Data Architecture\u003C/em\u003E\u003C/a\u003E, we discussed how to generate a set of data structures to model the game \u003Cem\u003EWordie\u003C/em\u003E using JavaScript. In this post we are going to discuss how to effectively utilize those data structures in a frontend development environment, namely, React, to make the game run.&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe main concern for our data structures is that when we make changes to our data, we need the UI (user interface) to reflect those changes. Hence, before discussing data implementation, we are going to first cover the fundamentals of React component rerendering to have a solid foundation on how React determines \u003Cem\u003Ewhen\u003C/em\u003E to rerender a component, before we actually start writing any code to make use of our data structures in React.&nbsp;\u003C/p\u003E\n\u003Ch2\u003EFactors Affecting React Component Rerendering\u003C/h2\u003E\n\u003Cp\u003EReact utilizes the \u003Ccode\u003E\u003Cstrong\u003EObject.is\u003C/strong\u003E\u003C/code\u003E\u003Cstrong\u003E comparison algorithm\u003C/strong\u003E \u003Ca href=\"https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update\" target=\"_blank\"\u003E\u003Csup\u003E\u003Cstrong\u003E1\u003C/strong\u003E\u003C/sup\u003E\u003C/a\u003E\u003Cspan style=\"color: rgb(0,0,0);\"\u003E\u003Csup\u003E,\u003C/sup\u003E\u003C/span\u003E \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#description\" target=\"_blank\"\u003E\u003Csup\u003E\u003Cstrong\u003E2\u003C/strong\u003E\u003C/sup\u003E\u003C/a\u003E between states in a component to determine whether the component should rerender. If the value for the new state is the same as the value for the previous state, the component \u003Cem\u003Ewill not rerender\u003C/em\u003E. The Object.is algorithm is almost the same as the strict equality operator, \u003Ccode\u003E===\u003C/code\u003E, which basically checks whether two values are the same or \u003Cstrong\u003Ewhether two variables point toward (reference) the same object\u003C/strong\u003E, without inspecting the key-value pairs of the object or the elements of the object (for arrays). In short, given a and b, Object.is answers the question, \"Are a and b stored in the same location in memory?\" If the answer is, \"yes\", then a is the same as b. Let's run some examples using \u003Ccode\u003EObject.is\u003C/code\u003E to see how it works, and then apply it to React component rerendering:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// Comparing numbers\u003Cbr\u003Econst a = 2;\u003Cbr\u003Econst b = 2;\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b)  // =&gt; true \u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003E// Comparing objects #1\u003Cbr\u003Econst a = { color: \"blue\" };\u003Cbr\u003Econst b = { color: \"blue\" };\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b) // =&gt; false\u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003E// Comparing objects #2\u003Cbr\u003Econst a = { color: \"blue\" };\u003Cbr\u003Econst b = a;\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b)  //=&gt; true\u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003E// Comparing objects #3\u003Cbr\u003Econst a = { color: \"blue\" };\u003Cbr\u003Econst b = Object.assign({}, a);   // or b = {...a}\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b)  // =&gt; false\u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003E// Comparing arrays #1\u003Cbr\u003Econst a = [];\u003Cbr\u003Econst b = [];\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b)  // =&gt; false\u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003E// Comparing arrays #2\u003Cbr\u003Econst a = [];\u003Cbr\u003Econst b = a;\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b)  // =&gt; true\u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003E// Comparing arrays #3\u003Cbr\u003Econst a = [];\u003Cbr\u003Econst b = [...a];     // or b = a.slice()\u003Cbr\u003E\u003Cstrong\u003EObject.is(a,b)  // =&gt; false\u003C/strong\u003E\u003C/pre\u003E\n\u003Cp\u003EIn the first example above we see that if two variables have the same number as value, then the variables are the same. That example might seem awkward, but let's apply it to a React component:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eimport React, {useState} from 'react';\u003Cbr\u003E\u003Cbr\u003Eexport default function MyComponent() {\u003Cbr\u003E  const [count, setCount] = useState(5);\u003Cbr\u003E  const b = 5;\u003Cbr\u003E\u003Cbr\u003E  return (\u003Cbr\u003E    &lt;&gt;\u003Cbr\u003E      &lt;button onClick={() =&gt; setCount(b)}&gt;\u003Cbr\u003E        Count is: {count}\u003Cbr\u003E      &lt;/button&gt; \u003Cbr\u003E    &lt;/&gt;\u003Cbr\u003E  )\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EWill the component rerender when the button is clicked??? No; the initial state value for the component is 5, and the new state value on click is also set to 5; since both state values are the same, the component does not rerender.&nbsp;\u003C/p\u003E\n\u003Cp\u003ENow, let's apply case #1 above for objects comparison, using a similar React component:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eimport React, {useState} from 'react';\u003Cbr\u003E\u003Cbr\u003Eexport default function MyComponent() {\u003Cbr\u003E  const [car, setCar] = useState({color: \"blue\"});\u003Cbr\u003E  const newest = {color: \"blue\"};\u003Cbr\u003E \u003Cbr\u003E  return (\u003Cbr\u003E    &lt;&gt;\u003Cbr\u003E      &lt;button onClick={() =&gt; setCar(newest)}&gt;\u003Cbr\u003E         The car is {car.color}\u003Cbr\u003E      &lt;/button&gt;\u003Cbr\u003E    &lt;/&gt;\u003Cbr\u003E  )\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EWill the component rerender when the button is clicked??? Well, before  clicking the button, the sentence will read, \u003Cstrong\u003E\u003Cem\u003E\"The car is blue\"\u003C/em\u003E\u003C/strong\u003E\u003Cstrong\u003E,\u003C/strong\u003E and after clicking the button the sentence will read, \u003Cstrong\u003E\u003Cem\u003E\"The car is blue\";\u003C/em\u003E\u003C/strong\u003E  however, since the initial state object in \u003Ccode\u003EuseState\u003C/code\u003E, namely, \u003Ccode\u003E{color: \"blue\"}\u003C/code\u003E, \u003Cstrong\u003Eis not the same object\u003C/strong\u003E referenced by the \u003Ccode\u003Enewest\u003C/code\u003E variable, \u003Cstrong\u003Ethe component will rerender\u003C/strong\u003E. In fact, the component will rerender after \u003Cem\u003Eevery\u003C/em\u003E button click. You might say, \"But in the previous example the sentence read \u003Cstrong\u003E\u003Cem\u003E'Count is: 5'\u003C/em\u003E\u003C/strong\u003E , both, before and after clicking the button, and the component was not rerendered.\" In the first example the state value was the same before and after clicking the button; in this later example not.\u003C/p\u003E\n\u003Cp\u003EIn case #2 for objects comparison in the \u003Ccode\u003EObject.is\u003C/code\u003E code snippet, the variable b is assigned to reference the \u003Cstrong\u003Eobject\u003C/strong\u003E referenced by the variable a. Hence, a and b reference \u003Cstrong\u003Ethe same object\u003C/strong\u003E. That means that if we perform a change to b, that change will also be reflected in a:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Econst a = { color: \"blue\" };\u003Cbr\u003Econst b = a;\u003Cbr\u003E\u003Cbr\u003Eb.color = \"red\";\u003Cbr\u003Eb  // =&gt; { color: \"red\" };\u003Cbr\u003Ea  // =&gt; { color: \"red\" };\u003Cbr\u003E\u003Cbr\u003E// 'a' and 'b' reference the same object\u003C/pre\u003E\n\u003Cp\u003EIf we want to make a change to b without affecting a, \u003Cstrong\u003Ewe need to make a clone\u003C/strong\u003E of a, and make the changes to the clone. We can make a clone of an object using the Object.assign method or the spread operator (case #3 in code snippet):\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Econst a = { color: \"blue\" };\u003Cbr\u003Econst b = Object.assign({}, a);\u003Cbr\u003E\u003Cbr\u003Eb  // =&gt; { color: \"blue\" };\u003Cbr\u003E\u003Cbr\u003Eb.color = \"red\";\u003Cbr\u003Eb  // =&gt; { color: \"red\" };\u003Cbr\u003Ea  // =&gt; { color: \"blue\" };\u003C/pre\u003E\n\u003Cp\u003EWhat does a clone have to do with React component rerender?&nbsp;\u003C/p\u003E\n\u003Cblockquote\u003EIf our React component state consists of an object (which includes arrays), and we want the component to rerender with the previous state plus some changes to the state, we need to create a clone of the previous state, modify the clone, and then set the clone as the new state.&nbsp;\u003C/blockquote\u003E\n\u003Cp\u003E&nbsp;Ok, with this knowledge, let us now update the board component for Wordie using React.\u003C/p\u003E\n\u003Ch2\u003ERerendering the Board Component, Method I: Using State Variables\u003C/h2\u003E\n\u003Cp\u003EThe three pieces of data presented in the \u003Ca href=\"https://devblog.dev/luismartinez/designing-wordle-wordle-clone-dsa-part-i-data-architecture-6defbeea\" target=\"_blank\"\u003E\u003Cins\u003Eprevious post\u003C/ins\u003E\u003C/a\u003E  to start the game were a \u003Cstrong\u003Ematrix\u003C/strong\u003E, a \u003Cstrong\u003Equeue\u003C/strong\u003E, and a \u003Cstrong\u003Epointer\u003C/strong\u003E. The board was represented as a 6x5 matrix, the queue consisted of 6 index integers, and the pointer was initialized to zero :\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet board = [\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E]\u003Cbr\u003E\u003Cbr\u003Elet queue = [0,1,2,3,4,5]\u003Cbr\u003E\u003Cbr\u003Elet pointer = 0;\u003C/pre\u003E\n\u003Cp\u003ESince there is no going back after processing a word (a row in the board), we'll define the queue outside the component since we will only remove values from the queue, and we'll define the pointer and the board using state variables inside the component, like so:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eimport React, {useState} from 'react';\u003Cbr\u003E\u003Cbr\u003Econst BOARD = new Array(6).fill(0).map(() =&gt; new Array(5).fill(\"\"));\u003Cbr\u003Elet queue = [0,1,2,3,4,5];\u003Cbr\u003E\u003Cbr\u003Eexport default function MyBoard() {\u003Cbr\u003E  const [board, setBoard] = useState(BOARD);\u003Cbr\u003E  const [pointer, setPointer] = useState(0);\u003Cbr\u003E\u003Cbr\u003E  return (\u003Cbr\u003E    &lt;div className=\"board\"&gt;\u003Cbr\u003E      return (\u003Cbr\u003E        {board.map((row, rowIndex) =&gt; {\u003Cbr\u003E          &lt;div className=\"row\" key={rowIndex}&gt;\u003Cbr\u003E            {row.map((col, colIndex) =&gt; { \u003Cbr\u003E              return (\u003Cbr\u003E                &lt;div className=\"column\" \u003Cbr\u003E                  key={parseInt(\"\" + rowIndex + colIndex)}\u003Cbr\u003E                &gt;\u003Cbr\u003E                  {col}\u003Cbr\u003E                &lt;/div&gt;\u003Cbr\u003E              );\u003Cbr\u003E            })}\u003Cbr\u003E          &lt;/div&gt;\u003Cbr\u003E        );\u003Cbr\u003E      })}\u003Cbr\u003E    &lt;div&gt;\u003Cbr\u003E  );\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EWith some styles, the above component renders a 6x5 grid, like the one below:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/dPOF6wX.png-QUPZsZumKjKKSHH\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003ENow, we can't make changes  to the board state variable directly, as those changes will not be reflected in the UI because when React compares the previous board with the changed board, it'll find out that it is the same object, and it will not rerender the component. Also, making direct changes to the board variable would mutate the component state, which runs against React's architecture of immutable state. So, to update the board, we'll have to make a clone of the board, update the clone, and set the clone as the new board. Now, how do we make a clone of a matrix (the board)? If we use the \u003Ccode\u003E.slice\u003C/code\u003E method (\u003Ccode\u003Eboard.slice())\u003C/code\u003E or the spread operator (\u003Ccode\u003E[...board]\u003C/code\u003E), the inner arrays of the resulting copy will still reference the inner arrays of the original board as these methods only perform \u003Cstrong\u003Eshallow-copies\u003C/strong\u003E of objects–top level objects are cloned, but objects inside the top level objects are not cloned, but referenced only. Let's prove it:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet board = [\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E]\u003Cbr\u003E\u003Cbr\u003Elet copy = board.slice();   // or copy = [...board]\u003Cbr\u003E\u003Cbr\u003Ecopy[1][2] = \"H\";\u003Cbr\u003E\u003Cbr\u003Ecopy  // =&gt; \u003Cbr\u003E[\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"H\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]\u003Cbr\u003E\u003Cbr\u003Eboard // =&gt; \u003Cbr\u003E[  \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"H\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003EChanging \u003Ccode\u003Ecopy\u003C/code\u003E also changed \u003Ccode\u003Eboard\u003C/code\u003E, hence \u003Ccode\u003Ecopy\u003C/code\u003E is not a clone of \u003Ccode\u003Eboard\u003C/code\u003E. It is worth noting that using the .slice method or the spread operator will create a new array, and the component will rerender; however, since the new array is only a  shallow-copy, that means we would be mutating the component's state. We can make a \u003Cstrong\u003Eclone\u003C/strong\u003E of the board (also known as a \u003Cstrong\u003Edeep copy\u003C/strong\u003E) by using JavaScript's \u003Cstrong\u003EstructuredClone function\u003C/strong\u003E:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet copy = structuredClone(board);\u003Cbr\u003E\u003Cbr\u003Ecopy[1][2] = \"H\";\u003Cbr\u003E\u003Cbr\u003Ecopy // =&gt; \u003Cbr\u003E[\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"H\", \"\", \"\"],   \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],  \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],   \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],   \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]    \u003Cbr\u003E\u003Cbr\u003Eboard // =&gt;  \u003Cbr\u003E[      \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003EWith the clone cleared, let's define a \u003Ccode\u003EdetectKeydown\u003C/code\u003E function that will be responsible for handling user inputs and perform changes to the board:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eimport React, {useState, useRef} from 'react';\u003Cbr\u003E\u003Cbr\u003Econst BOARD = new Array(6).fill(0).map(() =&gt; new Array(5).fill(\"\"));\u003Cbr\u003Econst ALPHABET = {A:'A',B:'B',C:'C',D:'D',E:'E'}; // rest\u003Cbr\u003Elet queue = [0,1,2,3,4,5]; \u003Cbr\u003E\u003Cbr\u003Eexport default function MyBoard() {\u003Cbr\u003E  const [board, setBoard] = useState(BOARD);\u003Cbr\u003E  const [pointer, setPointer] = useState(0);\u003Cbr\u003E  const page = useRef(null);\u003Cbr\u003E\u003Cbr\u003E  const detectKeydown = useCallBack(\u003Cbr\u003E    (e) =&gt; {\u003Cbr\u003E      const row = queue[0];\u003Cbr\u003E       if(ALPHABET[key]) {\u003Cbr\u003E         const clone = structuredClone(board);\u003Cbr\u003E         clone[row][pointer] = e.key;\u003Cbr\u003E         setBoard(clone);\u003Cbr\u003E         setPointer(prev =&gt; prev + 1);\u003Cbr\u003E       }\u003Cbr\u003E    },\u003Cbr\u003E    [board, pointer]\u003Cbr\u003E);\u003Cbr\u003E\u003Cbr\u003E  useEffect(() =&gt; {\u003Cbr\u003E    if(!page.current) {\u003Cbr\u003E      page.current = document;\u003Cbr\u003E      page.current.addEventListener('keydown', detectKeydown, true);\u003Cbr\u003E    }\u003Cbr\u003E    return () =&gt; \u003Cbr\u003E      page.current.removeEventListener('keydown', detectKeydown, true)\u003Cbr\u003E  },[detectKeydown]);\u003Cbr\u003E\u003Cbr\u003E  return (\u003Cbr\u003E    // code for rendering board\u003Cbr\u003E  );\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EIn the above code snippet, in the useEffect block, we add a keydown event listener to the HTML document, and bind a \u003Ccode\u003EdetectKeydown\u003C/code\u003E function to it. In order to avoid attaching the event listener twice, we store the page in a useRef hook, which has a value of null initially, and gets set on the first component render (component mount). The return value of the useEffect is a lambda (arrow) function that gets called when we exit the component (component unmounts; e.g., leave the page using a navbar link) so that the event listener does not stay active afterwards.\u003C/p\u003E\n\u003Cp\u003EThe code in the detectKeydown function updates the board with the user input, and the component will rerender to reflect the updates. And that's how you can use state variables to update the board!!!\u003C/p\u003E\n\u003Cp\u003ENow, notice that for making a single change in the board, we need to clone the whole board first. When designing Wordie Clone, I knew from the beginning that using state variables for the board component would require constantly cloning the board matrix, and so, I developed the board component with a different approach. That will take us to our second method for rerendering the board.&nbsp;\u003C/p\u003E\n\u003Ch2\u003ERerendering the Board Component, Method II: Using Stateless Variables plus a Switch State Variable\u003C/h2\u003E\n\u003Cp\u003EI did not feel happy cloning the whole matrix as that would set a time complexity for rerendering of at least O(mxn), where m is the number of rows, and n the number of columns in the matrix (the board), respectively. So, I took advantage of React's comparison algorithm and the fact that a new object in JavaScript is not the same as a new object, that is,&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E{} === {}  // =&gt; false\u003Cbr\u003E\u003Cbr\u003EObject.is({}, {})  // =&gt; false\u003C/pre\u003E\n\u003Cp\u003EThis means that if we use a state variable in a component and initialize it with an empty object, and then later set the variable equal to an empty object, the component will rerender, since the comparison of the previous state value and the current state value returns false. That is, having a component&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eimport React, {useState} from 'react;\u003Cbr\u003E\u003Cbr\u003Eexport default function MyBoard() {\u003Cbr\u003E   const [handle, setHandle] = useState({});\u003Cbr\u003E\u003Cbr\u003E   return (\u003Cbr\u003E   // code for rendering board\u003Cbr\u003E   )\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003Eand calling\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003EsetHandle({});\u003Cbr\u003EsetHandle({});\u003Cbr\u003EsetHandle({});\u003C/pre\u003E\n\u003Cp\u003Ewill trigger a component rerender every time we call \u003Ccode\u003EsetHandle({})\u003C/code\u003E. So, instead of defining the board variable inside the component, we'll define the board variable outside the component in a stateless variable, and after we're done making changes to the stateless variable, we'll trigger a component rerender using a \u003Cem\u003Ehandle\u003C/em\u003E (or switch) state variable:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eimport React, {useState, useRef} from 'react';  \u003Cbr\u003Elet board = new Array(6).fill(0).map(() =&gt; new Array(5).fill(\"\"));  \u003Cbr\u003Elet pointer = 0;\u003Cbr\u003Elet queue = [0,1,2,3,4,5];   \u003Cbr\u003Econst ALPHABET = {A:'A',B:'B',C:'C',D:'D',E:'E', // rest }; \u003Cbr\u003E\u003Cbr\u003Eexport default function MyBoard() {     \u003Cbr\u003E   const [handle, setHandle] = useState({});   \u003Cbr\u003E   const page = useRef(null);    \u003Cbr\u003E   const detectKeydown = (e) =&gt; {      \u003Cbr\u003E      const row = queue[0];      \u003Cbr\u003E      if(ALPHABET[key]) {            \u003Cbr\u003E        board[row][pointer] = e.key;        \u003Cbr\u003E        pointer++;        \u003Cbr\u003E\u003Cstrong\u003E        setHandle({});      \u003C/strong\u003E\u003Cbr\u003E      }   \u003Cbr\u003E   }    \u003Cbr\u003E   useEffect(() =&gt; {     \u003Cbr\u003E      // code for useEffect \u003Cbr\u003E   },[detectKeydown]);    \u003Cbr\u003E   return (     \u003Cbr\u003E    // code for rendering board\u003Cbr\u003E   );  \u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EWith the above code snippet we can successfully rerender the component with the user inputs without cloning the board.&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe stateful board from method I and this \"stateless\" board (the board has state, but it is a dummy state, hence \"stateless\") have similar behavior–on every rerender they both only update the part of the DOM that is changed, as shown below:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/5dpV7ym.gif-YLA5f1OpDdfkmiG\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003Enow, since the stateless board updates the board in-place, I would expect the stateless board to rerender faster than the stateful board. I carried out some performance tests on the stateful board and the stateless board using the \u003Ca href=\"https://reactjs.org/docs/profiler.html\" target=\"_blank\"\u003EReact Profiler component\u003C/a\u003E  (more on this on a later post) to gather data about the components' rerender time. I designed tests for three board sizes: 6x5, 10x10, and 20x10, yielding a total of 30, 100, and 200 rerenders, respectively. You can run and play with the tests live in the below code sandbox (click on the rectangle-arrow button to open the sandbox in a new window):\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Ciframe width=\"100%\" height=\"auto\" src=\"https://codesandbox.io/embed/wordle-clone-dsa-performance-tests-k2cc2k?fontsize=14&hidenavigation=1&theme=dark\" frameBorder=\"0\"\u003E\u003C/iframe\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003EThis is the data I gathered after running the tests:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/Tg2CU6I.png-WMlBEAJ7uQW5yWd\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EFrom the \u003Cem\u003Eoverall average rerender time\u003C/em\u003E, for the 6x5 board, the \u003Cstrong\u003Estateless component rerenders 62.2% faster\u003C/strong\u003E than the stateful component; for the 10x10 board, the stateless component rerenders 80.8% faster than the stateful component, and for the 20x10 board, the stateless component rerenders 83.5% faster than the stateful component. In short, the \u003Cstrong\u003Estateless board rerenders at least 1.6 times faster\u003C/strong\u003E than the stateful board. So, as I expected, avoiding cloning the board speeds the component up.&nbsp;\u003C/p\u003E\n\u003Cp\u003ENow, there is a tradeoff here: by using a stateless board, you lose the history of the board, which means you cannot revert the board to a previous state (like the \u003Cem\u003Eundo\u003C/em\u003E button in a text editor); however, for this game, that is fine, as we only move forward, and the only history we need is for the current row in the game, which  is handled by the pointer variable.&nbsp;\u003C/p\u003E\n\u003Cp\u003ESo let's finish up by summarizing the key points from methods I and II for rerendering the board.&nbsp;\u003C/p\u003E\n\u003Ch2\u003ESummary\u003C/h2\u003E\n\u003Cp\u003EWhen using a matrix to model Wordie, we can use the structuredClone function to create a deep-copy of the board in a stateful component (there are also other ways to create deep-copies besides structuredClone), whereas if we use stateless variables, we can use a switch state variable for triggering component rerenders after making changes to our stateless variables.&nbsp;\u003C/p\u003E\n\u003Cp\u003EOne last note is that using stateless variables is not React's defacto architecture as React runs on immutability, and this has only been an example of a case where a combination of stateless plus state variables can be used to potentially speed things up. Also, the nature of the game (not needing to keep history) allows to more easily make these explorations. Please feel free to add any comments below.\u003C/p\u003E\n\u003Cp\u003E\u003Ca href=\"https://github.com/mmartinezluis/wordle-clone-dsa-performance-tests\" target=\"_blank\"\u003EGitHub respositor\u003C/a\u003Ey  for the code sandbox.  You can play with \u003Ca href=\"https://wordle-clone-dsa.netlify.app/\" target=\"_blank\"\u003EWordie Clone DSA here\u003C/a\u003E, and you can find the code for Wordie Clone DSA \u003Ca href=\"https://github.com/mmartinezluis/wordle-clone-dsa\" target=\"_blank\"\u003Ehere\u003C/a\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Dec 3, 2022",
    "images": [
      {
        "id": 97,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "wcdsa_part2_cover image.png",
        "s3key": null,
        "size": 44457,
        "url": "https://i.imgur.com/qCbyuOU.png"
      }
    ],
    "status": "published",
    "title": "Designing Wordie: Wordie Clone DSA, Part II: Data Implementation",
    "url": "luismartinez/designing-wordle-wordle-clone-dsa-part-ii-data-implementation-1d370b6514",
    "user_id": 1
  },
  {
    "id": 215,
    "abstract": "In this post I would like to discuss one approach to designing the popular mobile app game ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EDesigning Wordie: Wordie Clone DSA, Part I: Data Architecture\u003C/h1\u003E\n\u003Cp\u003EIn this post I would like to discuss one approach to designing the popular mobile app game \u003Cstrong\u003EWordie\u003C/strong\u003E.&nbsp;\u003C/p\u003E\n\u003Cp\u003EAs an introduction, let's first discuss the two major aspects in building a small application (such as Wordie): \u003Cstrong\u003Edata architecture\u003C/strong\u003E, and \u003Cstrong\u003Edata implementation\u003C/strong\u003E.&nbsp;\u003C/p\u003E\n\u003Cp\u003EData architecture is the first aspect to consider as it provides you with the building blocks to build your app. Imagine you wanted to build a 20-stories building, and you start the construction process using whatever comes  at hand without first gathering the required materials; you may end up with some kind of construction, but it would hardly be the original 20-stories building. The same way, before we start writing any code for our app, we need to gather the data structures (the building blocks) that will be required for developing the app. You may not have all of the required building blocks to build the whole thing, but you should have enough building blocks to start your building process with a \u003Cstrong\u003Estrong foundation\u003C/strong\u003E (also, a strong foundation allows us to develop apps that scale).\u003C/p\u003E\n\u003Cp\u003EThe second aspect, data implementation, refers to how we properly use our building blocks in the context of the development environment (React JS, in this case; but it could be VUE, or Angular, etc.). In this post, I will focus on data architecture; data implementation is discussed in the \u003Ca href=\"https://devblog.dev/luismartinez/designing-wordle-wordle-clone-dsa-part-ii-data-implementation-1d370b6514\" target=\"_blank\"\u003Esecond post\u003C/a\u003E of this series.&nbsp;\u003C/p\u003E\n\u003Cp\u003EOk, with this, let's take a look at an example of Wordie, in case you haven't seen the game before (or \u003Ca href=\"https://wordle-clone-dsa.netlify.app/\" target=\"_blank\"\u003Etry it for yourself here\u003C/a\u003E):&nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/IHN0kzK.png-zGEnUH29xSmfYdC\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003EAs you can see, the game consists of guessing a five-letters word in six tries. For each try, you get hints through the tiles color as whether the letter is in the correct position (green), misplaced (yellow), or not in the word at all (gray).\u003C/p\u003E\n\u003Cp\u003EThe first thought that came to my mind was, \"I'm going to need to build a command-line interface (CLI) for taking user inputs\". Since I was going to use React , I further thought,\"Uh, I'm going to need a Node JS backend for the CLI to process the user  inputs\". Well, it turns out that you can process user inputs right from React, using JavaScript. Hence, we don't actually need a backend to perform the core functionalities of the app (we would need a backend if we wanted to store user results statistics or require user login). So, the app only needs a frontend, and we process user inputs right from the browser (more on this later).&nbsp;\u003C/p\u003E\n\u003Cp\u003ESo the next step was to gather the app's data building blocks. Since I had been practicing \u003Cstrong\u003EData Structures and Algorithms\u003C/strong\u003E, I was purposefully looking to use what I had been learning to build the app. And it turned out that the final data model I came up with for the app was a \u003Cstrong\u003Edirect result\u003C/strong\u003E of the things I had been learning. \u003Cbr\u003E\u003Cbr\u003ELet's start with the board, which is the major component of the app (the keyboard is an external dependency, and so, I'll not be covering the keyboard in this post). The board is a 6x5 grid (6 rows, and 5 columns), and we can model the board using a \u003Cstrong\u003Ematrix\u003C/strong\u003E. A matrix  is a bi-dimensional array (an array whose values consist of arrays). Let's take a look at a JavaScript 6x5 matrix of empty strings:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet matrix = [\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],    \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003EEach row in the matrix contains 5 columns, and the value for each column is an empty string. Say that we want to place the letter \"W\" in the [5, 1] cell (row 6, column 2; cell values are zero-indexed); we would do the following:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Ematrix[5][1] = \"W\";\u003Cbr\u003E\u003Cbr\u003E\u003Cem\u003E// which produces, matrix =&gt; \u003C/em\u003E\u003Cbr\u003E[\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"W\", \"\", \"\", \"\"]\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003EOr, say we now want the last row to be \"GRAPH\", we would do\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Ematrix[5][0] = \"G\";\u003Cbr\u003Ematrix[5][1] = \"R\";\u003Cbr\u003Ematrix[5][2] = \"A\";\u003Cbr\u003Ematrix[5][3] = \"P\";\u003Cbr\u003Ematrix[5][4] = \"H\";\u003Cbr\u003E\u003Cbr\u003E// matrix =&gt; \u003Cbr\u003E[\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"G\", \"R\", \"A\", \"P\", \"H\"]\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003ESo, changing a given value of a matrix is a constant time operation (O(1)), as long as we know the row index and the column index before hand.&nbsp;\u003C/p\u003E\n\u003Cp\u003EIn the game, the user cannot proceed to the next row until done with the current row. So in our above example of an initial matrix with empty strings, following the game rules, the \"GRAPH\" word would need to go on row 1 instead of row 6. The idea of processing inputs in the order of first appearance is related to the \u003Cstrong\u003Equeue data structure\u003C/strong\u003E. In a queue, values that come first are processed first. In JavaScript, we can represent a queue using an array (there is a formal way of representing queues, but it is out of scope for this post). Let's take a look at an example of a queue\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet queue = [0,1,2,3,4,5]\u003C/pre\u003E\n\u003Cp\u003EThe first value of the queue is 0, the second value is 1, and so on and so forth. In a queue, the first value is processed first, then the next value. Say we want to access the first value in the queue, and extract the first value from the queue, respectively; we would do&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet queue = [0,1,2,3,4,5]\u003Cbr\u003E\u003Cbr\u003E// access first value in queue\u003Cbr\u003Econst firstValue = queue[0];\u003Cbr\u003E// firstValue =&gt; 0\u003Cbr\u003E// queue =&gt; [0,1,2,3,4,5]\u003Cbr\u003E\u003Cbr\u003E// extract (remove) first value from queue\u003Cbr\u003Econst extracted = queue.shift();\u003Cbr\u003E// extracted =&gt; 0\u003Cbr\u003E// queue =&gt; [1,2,3,4,5]\u003Cbr\u003E\u003Cbr\u003Econst nextExtractedValue = queue.shift();\u003Cbr\u003E// nextExtractedValue =&gt; 1;\u003Cbr\u003E// queue =&gt; [2,3,4,5];\u003C/pre\u003E\n\u003Cp\u003EHow is a queue related to the game? Well, we can use a matrix to represent the board, and we can use a \u003Cstrong\u003Equeue\u003C/strong\u003E to represent the \u003Cstrong\u003Eorder of row processing in the board\u003C/strong\u003E, with the \u003Cstrong\u003Efirst value\u003C/strong\u003E of the queue representing the \u003Cstrong\u003Ecurrent row being processed\u003C/strong\u003E. So we can start the game by doing this\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet rows = [0,1,2,3,4,5];\u003Cbr\u003E\u003Cbr\u003Elet board = [\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"], \u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]\u003Cbr\u003E\u003Cbr\u003Elet current_row = rows[0];\u003Cbr\u003E// current_row =&gt; 0\u003C/pre\u003E\n\u003Cp\u003EWe can access the \u003Cstrong\u003Ecurrent row in the board\u003C/strong\u003E by calling \u003Ccode\u003E\u003Cstrong\u003Eboard[current_row]\u003C/strong\u003E\u003C/code\u003E. For the above example, accessing row 1 (index 0) would be \u003Ccode\u003Eboard[current_row]\u003C/code\u003E, which yields \u003Ccode\u003Eboard[0]\u003C/code\u003E, which yields \u003Ccode\u003E[\"\", \"\", \"\", \"\", \"\"]\u003C/code\u003E.When we are done with the first row, we can call \u003Ccode\u003E\u003Cstrong\u003Erows.shift()\u003C/strong\u003E\u003C/code\u003E to remove the row and proceed to the next row. We reinitialize the current row by calling \u003Ccode\u003E\u003Cstrong\u003Ecurrent_row = rows[0]\u003C/strong\u003E\u003C/code\u003E, which will return 1 (as we had performed a rows.shift() before).&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe final major step is to access the \u003Cstrong\u003Enext available position\u003C/strong\u003E the user is to type in. To keep track of the next available position we use a \u003Cstrong\u003Epointer\u003C/strong\u003E, which is an integer variable, like so\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet current_position = 0;\u003C/pre\u003E\n\u003Cp\u003ESo combining the matrix, the queue, and the pointer, we get the \u003Cstrong\u003Ecurrent row\u003C/strong\u003E and the \u003Cstrong\u003Enext available position\u003C/strong\u003E to start the game:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet rows = [0,1,2,3,4,5];\u003Cbr\u003Elet board = [\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E]\u003Cbr\u003E\u003Cbr\u003Elet current_row = rows[0];\u003Cbr\u003Elet current_position = 0;\u003C/pre\u003E\n\u003Cp\u003ETo \u003Cstrong\u003Eaccess the next available position\u003C/strong\u003E in the board, we call\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eboard[current_row][current_position];\u003C/pre\u003E\n\u003Cp\u003EWhen the user types for first time, we'll process the first cell on row 1 (row index 0, column index 0) with whatever the user typed (assuming typed a letter). We will update the board matrix with the user input, and increase the current position pointer by 1\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eboard[current_row][current_position] = \"{userInput}\"  //a letter\u003Cbr\u003E\u003Cbr\u003Ecurrent_position = current_position + 1;\u003C/pre\u003E\n\u003Cp\u003EThis way, the next time the user types we'll be at column 2 (column index 1). We'll rerun the two above lines, which will update the board with the second user input and move the next available position to column 3. Basically, with this set up, we can update the board matrix with the user input one letter at a time in the current row. \u003Cbr\u003E\u003Cbr\u003ENow, what if the user presses the \u003Cstrong\u003EBackspace key\u003C/strong\u003E (for deleting)? We need to run some logic before performing a deletion: we first decrease the current position by 1, and then delete the contents of the updated position:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Ecurrent_position = current_position - 1;\u003Cbr\u003E\u003Cbr\u003Eboard[current_row][current_position] = \"\";\u003C/pre\u003E\n\u003Cp\u003EThere are some edge cases here though, such as, \"What if the user presses the Backspace key when the pointer is at position 0?\" Well, that's something that needs to be handled in the code using conditional statements. For this case, we would only allow Backspace processing only if the value for the current_position pointer is greater than 0 and less than or equal to 5:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// Basic logic for handling Backspace key\u003Cbr\u003Eif(key === \"BACKSPACE\") {\u003Cbr\u003E   if(current_position &gt; 0 &amp;&amp; current_position &lt;= 5) {\u003Cbr\u003E      current_position -= 1;\u003Cbr\u003E      board[current_row][current_position] = \"\";\u003Cbr\u003E   }\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EYou might be wondering, \"Where does the 5 come from in \u003Ccode\u003Ecurrent_position &lt;= 5\u003C/code\u003E?\" Well, the last available position is column index 4 (the fifth letter in the current row). At this point, our pointer variable will increase to 5. So, if user types for backspace and pointer is value 5, that means we are going to delete the last letter in the current row. Therefore, as long as the pointer is at most 5, we can process that backspace input.\u003C/p\u003E\n\u003Cp\u003ESo far we have performed three major operations for the game:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003EUpdate the board matrix (\u003Ccode\u003Eboard[row_index][col_index] = \"a letter\"\u003C/code\u003E)\u003C/li\u003E\n\u003Cli\u003EAccess the current row in the board (board[\u003Ccode\u003Erows[0]]\u003C/code\u003E)\u003C/li\u003E\n\u003Cli\u003EMove the pointer to next available position (\u003Ccode\u003Epointer = pointer + 1\u003C/code\u003E)\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EWith these operations we can perform the initial processing of user input. Each of the above operations runs in constant time (O(1)) and, hence, using this combination of data structures allows us to handle individual user input in constant time, which is nice.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet us now introduce a dynamic way of generating the data structures we've discussed so far. Say we want an \u003Cstrong\u003Emxn matrix\u003C/strong\u003E (m rows, n columns); we can use this code\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet matrix = new Array(m).fill(0).map(() =&gt; new Array(n).fill(\"\"))&nbsp;\u003C/pre\u003E\n\u003Cp\u003EAnd so, generating a 6x5 matrix with empty strings will be\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet matrix = new Array(6).fill(0).map(() =&gt; new Array(5).fill(\"\"))\u003C/pre\u003E\n\u003Cp\u003ETo generate a \u003Cstrong\u003Equeue\u003C/strong\u003E with 6 values starting at 0 until index 5, we write\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet queue = new Array(6).fill(0).map((val, index) =&gt; index);\u003C/pre\u003E\n\u003Cp\u003EThe \u003Cstrong\u003Epointer\u003C/strong\u003E stays the same, namely,\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Elet pointer = 0;\u003C/pre\u003E\n\u003Cp\u003EWhen done with the current row, we call \u003Ccode\u003Equeue.shift()\u003C/code\u003E, and then we access the next row by calling \u003Ccode\u003Eboard[queue[0]]\u003C/code\u003E.&nbsp;\u003C/p\u003E\n\u003Ch2\u003EProcessing a Word\u003C/h2\u003E\n\u003Cp\u003ETo process a word, we need to run a loop, and compare each value of our board matrix for the current row with the value of the target word at the corresponding position; so if row 1 in our board contains \"STACK\", and the target word is \"SLACK\", we compare \u003Ccode\u003Eboard[current_row][0]\u003C/code\u003E \u003Cstrong\u003Ewith\u003C/strong\u003E \u003Ccode\u003Etarget[0]\u003C/code\u003E, and \u003Ccode\u003Eboard[current_row][1]\u003C/code\u003E \u003Cstrong\u003Ewith\u003C/strong\u003E \u003Ccode\u003Etarget[1]\u003C/code\u003E, and so forth. Here we can introduce an \u003Cstrong\u003Eassertion matrix\u003C/strong\u003E to keep track of whether the comparison for each letter was either a match, a miss, or a close, and we can use that matrix to add background color to the  board after or while the word is being processed. The assertion matrix will be the same size as the board matrix, just that we are going to update the assertion matrix with codes, say (code 0 means missed, code 1 means close, and code 2 means match). An example of such an assertion matrix after processing row 1 with \"STACK\" as user input and \"SLACK\" for target word would be&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eassertion_matrix = [\u003Cbr\u003E   [ 2,  0,  2,  2,  2],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"],\u003Cbr\u003E   [\"\", \"\", \"\", \"\", \"\"]\u003Cbr\u003E]&nbsp;\u003C/pre\u003E\n\u003Cp\u003Eand we can use these codes to dynamically add CSS class names to our HTML code containing our board so the cells get color. Or even better, we can just use string codes (as opposed to numbers) in the assertion matrix and directly add those strings to the class names.&nbsp;\u003C/p\u003E\n\u003Cp\u003ESo with this combination of data structures you can build a Wordie game, and also implement advanced features, such as adding placeholders and editing a specific cell in the current row. And, hey, \u003Cstrong\u003EWordie Clone DSA\u003C/strong\u003E contains all of these.&nbsp;\u003C/p\u003E\n\u003Cp\u003ELet's now move to user input detection.\u003C/p\u003E\n\u003Ch2\u003EDetecting User Input\u003C/h2\u003E\n\u003Cp\u003EIn our React component, we can attach a \u003Cstrong\u003Ekeydown\u003C/strong\u003E event listener on the HTML document. The most convenient way of doing this is in an useEffect hook. We also need to get a reference for the HTML document (the page where React is running) so we can have control of when we attach (or also detach) the event listener. So we do\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// import statements...\u003Cbr\u003Econst MyBoardComponent= () =&gt; {\u003Cbr\u003E  const page = useRef(null);\u003Cbr\u003E  const yourKeydownFunction = useCallBack((key) =&gt; {\u003Cbr\u003E     if(ALPHABET[key]) {\u003Cbr\u003E       // process the key; update your board matrix\u003Cbr\u003E     }\u003Cbr\u003E     // do more things\u003Cbr\u003E  },[anydependenciesinKeydownFunction])\u003Cbr\u003E\u003Cbr\u003E  useEffect(() =&gt; {\u003Cbr\u003E    // makes sure event listener is only attached once\u003Cbr\u003E    if(!page.current) {\u003Cbr\u003E      page.current = document;\u003Cbr\u003E      page.current.addEventListener('keydown', yourKedownFunction, true);\u003Cbr\u003E    }\u003Cbr\u003E  },[yourKeydownFunction])\u003Cbr\u003E\u003Cbr\u003E  return (\u003Cbr\u003E    // code for rendering board\u003Cbr\u003E  )\u003Cbr\u003E}\u003Cbr\u003Eexport default MyBoardComponent;\u003C/pre\u003E\n\u003Cp\u003EWith this, you'll be able to detect any key the user presses on their device.&nbsp;\u003C/p\u003E\n\u003Cp\u003EYou can find the full code that powers the board for \u003Cstrong\u003EWordie Clone DSA\u003C/strong\u003E in the components/Board.js file in the \u003Ca href=\"https://github.com/mmartinezluis/wordle-clone\" target=\"_blank\"\u003Egithub repository\u003C/a\u003E  for Wordie Clone.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EYou can play with Wordie Clone DSA at this \u003C/strong\u003E\u003Ca href=\"https://wordle-clone-dsa.netlify.app/\" target=\"_blank\"\u003E\u003Cstrong\u003Elink\u003C/strong\u003E\u003C/a\u003E\u003Cstrong\u003E .\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003EHappy coding!!!\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Nov 10, 2022",
    "images": [
      {
        "id": 98,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "wordle-clone-dsa_logo.png",
        "s3key": null,
        "size": 18371,
        "url": "https://i.imgur.com/Dco9nFO.png"
      }
    ],
    "status": "published",
    "title": "Designing Wordie: Wordie Clone DSA, Part I: Data Architecture",
    "url": "luismartinez/designing-wordle-wordle-clone-dsa-part-i-data-architecture-6defbeea",
    "user_id": 1
  },
  {
    "id": 155,
    "abstract": "In this post I want to discuss one way of persisting data to a back end (an API) using a Draft JS Wysiwyg editor.",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EPersisting Your Draft JS Wysiwyg Editor's Data to Your Back End\u003C/h1\u003E\n\u003Cp\u003EIn this post I want to discuss one way of persisting data to a back end (an API) using a Draft JS Wysiwyg editor.\u003C/p\u003E\n\u003Cp\u003ETo follow along with this post, you'll need to be familiar with Draft JS, Draft JS Wysiwyg, and React JS. I provide a decent introduction to Draft JS and Draft JS Wysiwyg along with external links in the first two sections of my post \u003Ca href=\"https://devblog.dev/posts/136\" target=\"_blank\"\u003EStabilizing Your Draft JS Wysiwyg Editor\u003C/a\u003E .&nbsp;\u003C/p\u003E\n\u003Cp\u003EIn order to save the contents of the editor to a database there are a couple of things that need to be set up first, besides  setting up the editor itself. We need a routing system for our app so that when we click on\"Edit\" for a specific blog post, the editor loads the clicked blog post, and when we click on \"New Post\", a blank editor is loaded. We also need to connect our app to an API to which we send the editor's data upon creating or updating a post, and from where we receive the data for blog posts to display them on our app. To demonstrate such a setup, I created a codesandbox that uses React for the frontend, React Router v6 for the routes, and a Json server for the back end API (the database). You can find the codesandbox  below. [\u003Cstrong\u003ENote\u003C/strong\u003E: if you see a 502 error message in the codesandbox, refresh this page, and the codesandbox should load properly; if it still does not work, open the codesandbox, give it a minute to run the scripts, and then click on the refresh page button in the browser inside the codesandbox]\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Ciframe width=\"100%\" height=\"auto\" src=\"https://codesandbox.io/embed/blog-website-prototype-p4lwp?fontsize=14&hidenavigation=1&theme=dark\" frameBorder=\"0\"\u003E\u003C/iframe\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003EI invite you to click on the \"Open preview in new window\" button in the left section of the codesandbox (this will open the app alone in a new tab), and then click around to see how the routes change as you click on the different links. There are two entry points to the Draft JS Wysiwyg editor: either, clicking on \"New Post\" or clicking on \"Edit\" in the show page of a post. Let us see how we can write code that utilizes the app's routing system to load a blank editor or an editor with contents depending on the route we are in. Consider the below code snippet, which defines our Wysiwyg editor component:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// WysiwygDataPersistence.js\u003Cbr\u003E\u003Cbr\u003Eimport React, { useState } from \"react\";\u003Cbr\u003Eimport { EditorState, convertToRaw } from \"draft-js\";\u003Cbr\u003Eimport { Editor } from \"react-draft-wysiwyg\";\u003Cbr\u003Eimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\u003Cbr\u003Eimport draftToHtml from \"draftjs-to-html\";\u003Cbr\u003Eimport { convertFromHTML } from \"draft-convert\";\u003Cbr\u003Eimport { useParams, useLocation, useNavigate } from \"react-router-dom\";\u003Cbr\u003Eimport { addPost, editPost } from \"../../actions/postActions\";\u003Cbr\u003Eimport { validPost } from \"./validator\";\u003Cbr\u003E\u003Cbr\u003Efunction WysiwygDataPersistence({ posts }) {\u003Cbr\u003E  const routeParams = useParams();\u003Cbr\u003E  const location = useLocation();\u003Cbr\u003E  const navigate = useNavigate();\u003Cbr\u003E  const [title, setTitle] = useState(\"\");\u003Cbr\u003E\u003Cbr\u003E  const [editorState, setEditorState] = useState(() =&gt; {\u003Cbr\u003E    if (location.pathname === \"/posts/new\") {\u003Cbr\u003E      return EditorState.createEmpty();\u003Cbr\u003E    } else if (routeParams.postId) {\u003Cbr\u003E      const currentPost = \u003Cbr\u003E   posts &amp;&amp; posts.find(({ id }) =&gt; `${id}` === routeParams.postId);\u003Cbr\u003E      setTitle(currentPost.title);\u003Cbr\u003E      return\u003Cbr\u003EEditorState.createWithContent(convertFromHTML(currentPost.body));\u003Cbr\u003E    }\u003Cbr\u003E  });\u003Cbr\u003E\u003Cbr\u003E  const onEditorStateChange = (editorState) =&gt; {\u003Cbr\u003E    setEditorState(editorState);\u003Cbr\u003E  };\u003Cbr\u003E\u003Cbr\u003E  function publish() {\u003Cbr\u003E    const body = \u003Cbr\u003E       draftToHtml(convertToRaw(editorState.getCurrentContent()));\u003Cbr\u003E    if (validPost(title, body)) {\u003Cbr\u003E      const postData = { title, body };\u003Cbr\u003E      addPost(\"posts\", postData, navigate);\u003Cbr\u003E    } else {\u003Cbr\u003E      console.log(\"Posts need to include a title and a body\");\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  function update() {\u003Cbr\u003E    const body = \u003Cbr\u003E       draftToHtml(convertToRaw(editorState.getCurrentContent()))\u003Cbr\u003E    const id = routeParams.postId;\u003Cbr\u003E    if (validPost(title, body)) {\u003Cbr\u003E      const postData = { title, body };\u003Cbr\u003E      editPost(id, postData, navigate);\u003Cbr\u003E    } else {\u003Cbr\u003E      console.log(\"Posts need to include a title and a body\");\u003Cbr\u003E    }\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  const handleTitle = (event) =&gt; {\u003Cbr\u003E    setTitle(event.target.value);\u003Cbr\u003E  };\u003Cbr\u003E\u003Cbr\u003E  let buttons;\u003Cbr\u003E  if (location.pathname === \"/posts/new\") {\u003Cbr\u003E    buttons = &lt;button onClick={publish}&gt;Publish&lt;/button&gt;;\u003Cbr\u003E  } else {\u003Cbr\u003E    buttons = &lt;button onClick={update}&gt;Update&lt;/button&gt;;\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  return (\u003Cbr\u003E    &lt;div className=\"textEditor\"&gt;\u003Cbr\u003E      &lt;header className=\"posteditor-header\"&gt;\u003Cbr\u003E        &lt;strong&gt;Post Editor&lt;/strong&gt;\u003Cbr\u003E      &lt;/header&gt;\u003Cbr\u003E      &lt;input\u003Cbr\u003E        type=\"text\"\u003Cbr\u003E        placeholder=\"Title\"\u003Cbr\u003E        value={title}\u003Cbr\u003E        onChange={handleTitle}\u003Cbr\u003E      /&gt;\u003Cbr\u003E      &lt;Editor\u003Cbr\u003E        editorState={editorState}\u003Cbr\u003E        wrapperClassName=\"wrapper-class\"\u003Cbr\u003E        editorClassName=\"editor-class\"\u003Cbr\u003E        toolbarClassName=\"toolbar-class\"\u003Cbr\u003E        onEditorStateChange={onEditorStateChange}\u003Cbr\u003E      /&gt;\u003Cbr\u003E      {buttons}\u003Cbr\u003E    &lt;/div&gt;\u003Cbr\u003E  );\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eexport default WysiwygDataPersistence;\u003C/pre\u003E\n\u003Cp\u003EExcluding the import lines,  our WysiwygDataPersistence editor contains 80 lines of code. In many occasions, I have found myself reading articles trying to debug a problem, and the article misses to explain an important part of the code, which then leaves you in a gray area and asking yourself why the author did not explain the relevant code. Considering this, I'll do my best in explaining the full code snippet.&nbsp;\u003C/p\u003E\n\u003Ch2\u003EThe Imports for the Editor\u003C/h2\u003E\n\u003Cp\u003ELet's start with the imports at the top of the code snippet. \u003Cstrong\u003EEditorState\u003C/strong\u003E is an immutable object that holds the contents (the data) of the editor. We can call methods on this object to instantiate a blank editor or an editor with contents (more on this later).&nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EconvertToRaw\u003C/strong\u003E is a function that converts the editor's immutable data into a JavaScript object. This JavaScript object can then later be transformed into other forms of data, such as HTML. Let's take a look at an example of a convertToRaw JavaScript object below:\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/DCRoMgN.pngdeleteHashCJhuI1wBUD1ciJt\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003EAs shown in the picture, each paragraph in the editor is saved in a blocks array in the convertToRaw JavaScript object. The JS object has two keys: \"blocks\", and \"entityMap\".&nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EEditor\u003C/strong\u003E is a component, and it renders the Wysiwyg editor. Its most important props are \u003Cem\u003EeditorState\u003C/em\u003E and \u003Cem\u003EonEditorStateChange\u003C/em\u003E (refer to the return section of the code to see the props) (more on this later).&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe \u003Cstrong\u003Ereact-draft-wysiwyg.css \u003C/strong\u003Eimport contains CSS styles for the editor.&nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EdraftToHTML\u003C/strong\u003E is a function that converts the JavaScript object returned by the converToRaw function into an HTML string. In the previous picture, you can see the HTML content returned by the draftToHTML function: the three &lt;p&gt; tags corresponding to the three paragraphs in the post.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EconvertFromHTML\u003C/strong\u003E transforms an HTML string into data readable by the Draft JS editor.\u003C/p\u003E\n\u003Cp\u003EWe will skip the remainder import lines as they will be explained in the WysiwygDataPersistence component.\u003C/p\u003E\n\u003Ch2\u003EThe Wysiwyg Editor Component\u003C/h2\u003E\n\u003Cp\u003ELet's now get into the WysiwygDataPersistence functional component.\u003C/p\u003E\n\u003Cp\u003EIn the component, the first three constants come from react router v6. Here the \u003Cstrong\u003EuseParams\u003C/strong\u003E hook provides us with relative paths (that is, whether we are in \u003Cem\u003Eposts/\u003C/em\u003E\u003Cstrong\u003E\u003Cem\u003E1\u003C/em\u003E\u003C/strong\u003E or in \u003Cem\u003Eposts/\u003C/em\u003E\u003Cstrong\u003E\u003Cem\u003E2\u003C/em\u003E\u003C/strong\u003E; the \u003Cstrong\u003E1\u003C/strong\u003E and the \u003Cstrong\u003E2\u003C/strong\u003E are the relative paths). The \u003Cstrong\u003EuseLocation\u003C/strong\u003E hook provides us with absolute paths (whether we are in \u003Cem\u003Eposts/new\u003C/em\u003E, in \u003Cem\u003Eposts/1/edit\u003C/em\u003E, in \u003Cem\u003Eauthors/3\u003C/em\u003E or in any other location). Finally, the \u003Cstrong\u003EuseNavigate\u003C/strong\u003E hook allows us to push the history of the browser (for example, when we create a new post, we will want to move from \u003Cem\u003E/posts\u003C/em\u003E to the show page of the newly created post, say, \u003Cem\u003E/posts/7\u003C/em\u003E, if the new post has an id of 7).&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe \u003Cstrong\u003Etitle\u003C/strong\u003E useState variable is used in a text input field for writing the title of the post (refer to the return section of the component).&nbsp;\u003C/p\u003E\n\u003Cp\u003ENext, we define an \u003Cstrong\u003EeditorState\u003C/strong\u003E constant that will hold an instance of the EditorState object, which contains the data for the editor. We use the useState hook to define this constant, and initialize it via a callback function. If we are loading the editor for a new post, the callback function returns an instance of a blank EditorState object; if we are loading the editor for editing a post, we first find the incoming post using the useParams hook and the posts array coming from the back end API, and then we convert the HTML contents of the post into an object readable by the editor, and initialize an EditorState object with this content.&nbsp;\u003C/p\u003E\n\u003Cp\u003ESince the WysiwygDataPersistence component is a controlled component, we define an \u003Cstrong\u003EonEditorStateChange\u003C/strong\u003E arrow function that updates the editorState constant defined above and, consequently, updates the editor itself. Refer to the return section of the WysiwygDataPersistence component for usage of the onEditorStateChange function.\u003C/p\u003E\n\u003Cp\u003EThe \u003Cstrong\u003Epublish\u003C/strong\u003E function converts the editor's data into a JavaScript object through the converToRaw function, and the JS object into an HTML string via the draftToHTML method. If the post is valid (it has a title and a body), we pass the HTML string to the \u003Cstrong\u003EaddPost\u003C/strong\u003E function, which connects with the app's API to persist the post to the database, and pushes the browser's history to the newly created post's show page. The definition of the addPost function is not included in the editor component, but can be found in the source code for the codesandbox in this \u003Ca href=\"https://github.com/mmartinezluis/blog-website-prototype\" target=\"_blank\"\u003Erepository\u003C/a\u003E. If the post is invalid, we console log an error message.\u003C/p\u003E\n\u003Cp\u003EThe workflow for the \u003Cstrong\u003Eupdate\u003C/strong\u003E function is identical to that of the publish function, except that we need to include the id of the post being edited, and call an editPost function with the posts'  HTML data&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe title variable is a controlled variable, and it is updated using the \u003Cstrong\u003EhandleTitle\u003C/strong\u003E arrow function.\u003C/p\u003E\n\u003Cp\u003ENext we define the \"\u003Cstrong\u003EPublish\u003C/strong\u003E\" and \"\u003Cstrong\u003EUpdate\u003C/strong\u003E\" buttons that can be found below the editor in the codesandbox. If we are loading a blank editor, the Publish button will show, otherwise, the Update button will show.&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe return block renders the above defined button and the Draft JS Wysiwyg editor. With this code we can create, edit, and delete posts, and the changes will be saved. You can give it a try yourself.&nbsp;\u003C/p\u003E\n\u003Cp\u003EYou may refer to the \u003Ca href=\"https://github.com/mmartinezluis/blog-website-prototype\" target=\"_blank\"\u003Esource code\u003C/a\u003E  for the codesandbox if you are interested in knowing  how the app transfers the posts' data to the API in the addPost and editPost functions.\u003C/p\u003E\n\u003Ch2\u003EPutting Everything Together\u003C/h2\u003E\n\u003Cp\u003EIn summary, the code for the WysiwygDataPersistence component accomplishes two main tasks:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003EConvert the HTML data for the incoming post from the API into a content state Draft JS object, which the editor uses to load the post (upon clicking on \"Edit\" on a post page).\u003C/li\u003E\n\u003Cli\u003EConvert the Draft JS content state data into HTML, and send the HTML data to the back end for storage (upon clicking on \"Publish\" or \"Update\" in the editor's page).&nbsp;\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EAnd there you have a fully working editor with data persistence.&nbsp;\u003C/p\u003E\n\u003Ch2\u003ESpecial Section On The Codesandbox\u003C/h2\u003E\n\u003Cp\u003ESetting up the above codesandbox was a real challenge. I did not want to deploy a repository to production with the purpose of simply showing this demonstration.  So I decided to set up the demo in a codesandbox instead. If you use a React JS codesandbox, you cannot save the contents of blog posts as the codesandbox does not count with a server nor a terminal to start a server (that is, you won't have a connection to a back end). If you use a Node JS codesandbox (this is the one I used), then you need to figure out how to configure the server and the client (the React JS app) to work properly in the codesandbox. One way of achieving this is by writing code to start the React app, and then manually opening a new terminal and run a command to start the server.&nbsp;\u003C/p\u003E\n\u003Cp\u003ESince I did not want the visitors of the codesandbox to run any commands for the app to start working, I had to find a way to start both, the React client, and the Json server automatically when opening the codesandbox. One way to achieve this is by using the \u003Cstrong\u003Econcurrently\u003C/strong\u003E npm package which allows you to run multiple commands concurrently, including at app start up. So I configured the scripts of the package.json file to start the client and the server concurrently. But there was a problem: under this configuration, the server always starts first, and then the client.&nbsp;\u003C/p\u003E\n\u003Cp\u003EThe process that starts first will be shown in the sandbox's main browser window and stays fixed, and a new browser window opens for the second process. Since the page for the Json server is a blank page, when opening the codesandbox the user would simply see a blank page. Therefore, to solve the problem, I needed to find a way of delaying the execution of the code for the Json server until the React client started so that the main browser window is loaded with the React app. After a lot of research and  many failed attempts, I got the solution with the \u003Cstrong\u003Ewait-on\u003C/strong\u003E npm package. This package  allows you to specify that a given command should not execute until another command has finished executing first. Let's see the scripts section of the package.json for the codesandbox:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E\"scripts\": {\u003Cbr\u003E  \"client\": \"react-scripts start\",\u003Cbr\u003E  \"server\": \"wait-on http://localhost:3000 &amp;&amp; nodemon server\",\u003Cbr\u003E  \"start\": \"concurrently \\\"npm run server\\\" \\\"npm run client\\\"\"\u003Cbr\u003E},\u003C/pre\u003E\n\u003Cp\u003EWe use concurrently to run the \"npm run server\" command, immediately followed by the \"npm run client\" command. Now, the \"npm run server\" command will not start to execute (will wait) until the connection to localhost:3000, executed by the \"react-scripts start\" command, has started. This way, when the codesandbox starts, the main browser window starts with the React app, which the user can see and interact with immediately.\u003C/p\u003E\n\u003Cp\u003EAnother thing to note is that the codesandbox does not use an external API for persisting the changes made in the app. All changes are saved in place in the db.json file located in the src folder in the main directory. In fact, you can open this file, and then make a change in the browser (like creating a post), and you will see how the file is overwritten with your changes in real time.&nbsp;\u003C/p\u003E\n\u003Cp\u003EI hope you have found this post useful. For the moment, DevBlog does not include comments for blog posts, but I'll be adding this functionality soon.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Dec 4, 2021",
    "images": [
      {
        "id": 99,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "conver_image.png",
        "s3key": null,
        "size": 248926,
        "url": "https://i.imgur.com/gYj1WrO.png"
      }
    ],
    "status": "published",
    "title": "Persisting Your Draft JS Wysiwyg Editor's Data to Your Back End",
    "url": "luismartinez/persisting-your-draft-js-wysiwyg-editor-s-data-to-your-back-end-f2aed4d9",
    "user_id": 1
  },
  {
    "id": 156,
    "abstract": "I first learned about Object-Oriented Ruby while completing the free online Software Engineer boot-camp prep course from Flatiron. I’m now a student at Flatiron in the self-paced Software Engineer program. As part of the first project (out of 5 projects) in the curriculum, we needed to build a ruby command-line-interface (CLI) that applies the fundamental concepts from Object-Oriented Ruby. [Note: this is one of my Medium articles transferred to DevBlog. You can find the original medium article ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EObject-Oriented Ruby and My First Ruby Project-Quotes App\u003C/h1\u003E\n\u003Cp\u003EI first learned about Object-Oriented Ruby while completing the free online Software Engineer boot-camp prep course from Flatiron. I’m now a student at Flatiron in the self-paced Software Engineer program. As part of the first project (out of 5 projects) in the curriculum, we needed to build a ruby command-line-interface (CLI) that applies the fundamental concepts from Object-Oriented Ruby. [Note: this is one of my Medium articles transferred to DevBlog. You can find the original medium article \u003Ca href=\"https://luis-mmartinez.medium.com/object-oriented-ruby-and-my-first-ruby-project-quotes-app-d47cec3585f1\" target=\"_blank\"\u003Ehere\u003C/a\u003E for comparison purposes]\u003C/p\u003E\n\u003Cp\u003EAfter doing research, I decided to build a CLI that displays quotes from various authors and categories.\u003C/p\u003E\n\u003Cp\u003EI‘ll devote the rest of the time to discuss some of the obstacles I faced and what I learned from the project.\u003C/p\u003E\n\u003Ch2\u003EMass Assignment and the Initialize Method\u003C/h2\u003E\n\u003Cp\u003EFor my project, I knew I wanted to create quote objects with several attributes, and that I wanted to create many quote objects at once. So I went on to apply mass assignment. In mass assignment, we iterate over a hash to set the \u003Cem\u003Ekey-value\u003C/em\u003E pair(s) of the hash as the corresponding \u003Cem\u003Eattribute–attribute return value \u003C/em\u003Epair(s) of the instance of a class. This is done via the \u003Ccode\u003E.send\u003C/code\u003E method. The \u003Ccode\u003E.send\u003C/code\u003E method operates on an instance of a class, and takes two arguments: the first argument is the name of a setter method for an object (ex: \u003Ccode\u003Eobject.\u003C/code\u003E\u003Ccode\u003E\u003Cstrong\u003Ecolor =\u003C/strong\u003E\u003C/code\u003E), and the second argument is the value for the assigned setter method (ex: \u003Ccode\u003Eobject.color = \u003C/code\u003E\u003Ccode\u003E\u003Cstrong\u003E\"blue”\u003C/strong\u003E\u003C/code\u003E). Hence, supposing we have an Object class with an attribute accessor of color, calling \u003Ccode\u003E.send\u003C/code\u003E on an instance of Object to set the value of the color property of the instance equal to the string ‘blue’ can be done as follows:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Eobject = Object.new\u003Cbr\u003Eobject.send(\"color=\", \"blue\")\u003C/pre\u003E\n\u003Cp\u003EThe last line of the above code is equivalent to \u003Ccode\u003Eobject.color = “blue”\u003C/code\u003E. For my Quote class in my project, I wanted to set values for each of the attributes of my Quote class’ instances upon initialization of the instances. Hence I used the following code:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Eclass Quote\u003Cbr\u003E  attr_accessor :body, :author  \u003Cbr\u003E  @@all = []  \u003Cbr\u003E  def initialize(quote_hash)\u003Cbr\u003E    quote_hash.each do |key, value| \u003Cbr\u003E      self.send((\"#{key}=\"), value)\u003Cbr\u003E    end\u003Cbr\u003E    @@all &lt;&lt; self\u003Cbr\u003E  end  \u003Cbr\u003E  # more code...\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EAs explained before, the \u003Ccode\u003E.send\u003C/code\u003E method has two arguments. Interpolation is used in the first argument (\u003Ccode\u003E\"#{key}=\"\u003C/code\u003E) in order to set the incoming hash’s key as a setter method for the instance that is being initialized. Also, it is worth noting that the incoming key needs to be included as an attribute accessor in the definition of the object’s class. The argument of the above initialize method is a hash. An example of one such hash (which are the precursors of the instances of my Quote class) would look like this:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003E{\u003Cbr\u003E :body=&gt;\"I didn't fail the test. I just found 100 ways to do it wrong.\",\u003Cbr\u003E :author=&gt;\"Benjamin Franklin\"\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003ESince I wanted to create many quote objects at once, I needed to have an \u003Cstrong\u003Earray of hashes\u003C/strong\u003E, where the key-value pairs from each hash would be used to instantiate a corresponding new quote object. I got my array of hashes using my Scraper class.\u003C/p\u003E\n\u003Cp\u003ELet’s assume that I got the below array of two hashes from my Scraper class:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Equotes_array = [\u003Cbr\u003E  {:body=&gt;\"I didn't fail the test. I just found 100 ways to do it wrong.\",\u003Cbr\u003E   :author=&gt;\"Benjamin Franklin\"},\u003Cbr\u003E  {:body=&gt;\u003Cbr\u003E   \"Always bear in mind that your own resolution to success is more important than any other one thing.\",\u003Cbr\u003E   :author=&gt;\"Abraham Lincoln\"}\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003EMy goal was (in this case) to create one quote object from each hash, with body and author properties set equal to their corresponding values from the hash upon initialization of the corresponding quote objects. So my first attempt was this:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EQuote.new(quotes_array)\u003C/pre\u003E\n\u003Cp\u003Eand I got the following error:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003ENoMethodError: undefined method `{:body=&gt;\"I didn't fail the test. I just found 100 ways to do it wrong.\", :author=&gt;\"Benjamin Franklin\"}=' for #&lt;Scraper::Quote:0x0000000001f33558&gt; from (pry):89:in `block in initialize'\u003C/pre\u003E\n\u003Cp\u003EIn the beginning, I thought that, since the \u003Ccode\u003Equotes_array\u003C/code\u003E contained hashes, the \u003Ccode\u003E\u003Cstrong\u003E.each\u003C/strong\u003E\u003C/code\u003E enumerator within the initialize method in my Quote class would iterate upon the keys and values of each hash in the \u003Ccode\u003Equotes_array\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Equotes_array.each do |key, value| \u003Cbr\u003E  self.send((\"#{key}=\"), value)\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003ETo better understand why I got the previous error, let us rewrite the \u003Ccode\u003Equotes_array\u003C/code\u003E as follows:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Equotes_array = [hash_1, hash_2]\u003C/pre\u003E\n\u003Cp\u003Ewhere hash_1 is the hash that has Benjamin Franklin as the value of the author key, and hash_2 is the second hash. The first iteration from the \u003Ccode\u003E.each\u003C/code\u003E enumerator would use the element \u003Cstrong\u003Ehash_1\u003C/strong\u003E as a setter method on the instance of the Quote class being instantiated at the moment (the error message give us that specific Quote class instance,\u003Ccode\u003EScraper::Quote:0x0000000001f33558\u003C/code\u003E), that is, the block for \u003Ccode\u003E.each\u003C/code\u003E is doing the following:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003E# hash_1 is passed in the argument of the .each enumerator, encapsulated within the 'key' element: \u003Cbr\u003E   quotes_array.each do |key, value| \u003Cbr\u003E     self.send((\"#{key}=\"), value)\u003Cbr\u003E   end\u003Cbr\u003E\u003Cbr\u003E# A new instance of the Quote class is initialized (that is, `self` becomes a new object): \u003Cbr\u003E   quotes_array.each do |key, value| \u003Cbr\u003E     Scraper::Quote:0x0000000001f33558.send((\"#{key}=\"), value)\u003Cbr\u003E   end\u003Cbr\u003E\u003Cbr\u003E# Because there is not a call for 'key.keys' or 'key.values' within the block for .each, neither the keys nor the values from hash_1 are accessed, and the only element for iteration is hash_1 itself; hence    \u003Cbr\u003E   |key, value| becomes |key| = |hash_1| \u003Cbr\u003E  # and so we get   \u003Cbr\u003E   quotes_array.each do |key| \u003Cbr\u003E     Scraper::Quote:0x0000000001f33558.send((\"#{key}=\"), value)\u003Cbr\u003E   end\u003Cbr\u003E\u003Cbr\u003E# The .send method will set 'key' as a setter method for the newly created Quote object, that is, .send will do the following:   \u003Cbr\u003E   Scraper::Quote:0x0000000001f33558.key =\u003Cbr\u003E\u003Cbr\u003E# Because key is equal to hash_1, the previous line can be rewritten as   Scraper::Quote:0x0000000001f33558.hash_1 = # Since hash_1 is not an attribute in the definition of our Quote class, at this point we get an error saying that the .hash_1= (setter) method is not defined for our instance of the Quote class. Finally, because hash_1 is originally defined as    \u003Cbr\u003E   {\u003Cbr\u003E     :body=&gt;\"I didn't fail the test. I just found 100 ways to do it wrong.\", \u003Cbr\u003E     :author=&gt;\"Benjamin Franklin\"\u003Cbr\u003E   }\u003Cbr\u003E\u003Cbr\u003E# we get the error message from terminal, which now clearly outputs that 'hash_1=', namely, \u003Cbr\u003E   `{\u003Cbr\u003E      :body=&gt;\"I didn't fail the test. I just found 100 ways to do it wrong.\", \u003Cbr\u003E      :author=&gt;\"Benjamin Franklin\"\u003Cbr\u003E   }=' \u003Cbr\u003E# is an undefined method for the object\u003Cbr\u003E#&lt;Scraper::Quote:0x0000000001f33558&gt;\u003C/pre\u003E\n\u003Cp\u003ESo, if we pass in an \u003Cstrong\u003Earray of hashes\u003C/strong\u003E as an argument in the initialize method, the keys and the values of the hashes will not be accessed, and the block for \u003Ccode\u003E.each\u003C/code\u003E will try to set each iterated hash as the setter method for the initialized instance of the Quote class. Therefore, we will need a second iteration in order to go one level deeper and access the keys and values from each hash. To accomplish this, I used the below code:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Eclass Quote\u003Cbr\u003E  attr_accessor :body, :author  \u003Cbr\u003E  @@all = []  \u003Cbr\u003E  def initialize (quotes_array)\u003Cbr\u003E    quotes_array.each do |quote_hash|\u003Cbr\u003E      quote_hash.each do |key, value| \u003Cbr\u003E        self.send((\"#{key}=\"), value)\u003Cbr\u003E      end\u003Cbr\u003E    @@all &lt;&lt; self\u003Cbr\u003E    end\u003Cbr\u003E  end  \u003Cbr\u003E  # more code...\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EWhen I passed in the \u003Ccode\u003Equotes_array\u003C/code\u003E of two hashes to the above initialize method, I got the following output:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EQuote.new(quotes_array) =&gt;#&lt;Scraper::Quote:0x0000000002b35860\u003Cbr\u003E @author=\"Abraham Lincoln\",\u003Cbr\u003E @body=\u003Cbr\u003E  \"Always bear in mind that your own resolution to success is more important than any other\u003Cbr\u003Eone thing.\"&gt;\u003C/pre\u003E\n\u003Cp\u003EAs I expected, adding a second iteration accesses the keys and values from the hash, and a \u003Cstrong\u003Equote object\u003C/strong\u003E, with Abraham Lincoln as the value for the author property, had been instantiated. Now, I was also expecting a quote object with Benjamin Franklin as an author to had been instantiated as well. So, I went on to examine my Quote \u003Ccode\u003E@@all\u003C/code\u003E class variable (an array), and I found this:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EQuote.all =&gt; [#&lt;Scraper::Quote:0x0000000002b35860\u003Cbr\u003E  @author=\"Abraham Lincoln\",\u003Cbr\u003E  @body=\u003Cbr\u003E   \"Always bear in mind that your own resolution to success is more important than any other\u003Cbr\u003E one thing.\"&gt;,\u003Cbr\u003E #&lt;Scraper::Quote:0x0000000002b35860\u003Cbr\u003E  @author=\"Abraham Lincoln\",\u003Cbr\u003E  @body=\u003Cbr\u003E   \"Always bear in mind that your own resolution to success is more important than any other\u003Cbr\u003E one thing.\"&gt;]\u003C/pre\u003E\n\u003Cp\u003EUhh, only one quote object had been instantiated (with Abraham Lincoln as author) and had been \u003Cstrong\u003Eadded\u003C/strong\u003E to the \u003Ccode\u003E@@all\u003C/code\u003Earray \u003Cstrong\u003Etwice\u003C/strong\u003E. To better understand why a quote with Benjamin Franklin had not been instantiated, I reversed the order of the hashes from the \u003Ccode\u003Equotes_array\u003C/code\u003E and made a \u003Ccode\u003Ereversed_quotes_array\u003C/code\u003E:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Ereversed_quotes_array =  [\u003Cbr\u003E  {:body=&gt;\"Always bear in mind that your own resolution to success is more important than any other one thing.\",\u003Cbr\u003E   :author=&gt;\"Abraham Lincoln\"},\u003Cbr\u003E  {:body=&gt;\"I didn't fail the test. I just found 100 ways to do it wrong.\",\u003Cbr\u003E   :author=&gt;\"Benjamin Franklin\"}\u003Cbr\u003E ]\u003C/pre\u003E\n\u003Cp\u003EI cleared my \u003Ccode\u003E@@all\u003C/code\u003E class variable, and passed in the \u003Ccode\u003Ereversed_quotes_array\u003C/code\u003E to my initialize method, and got the following result:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EQuote.new(reversed_quotes_array) =&gt;#&lt;Scraper::Quote:0x0000000002a805c8\u003Cbr\u003E @author=\"Benjamin Franklin\",\u003Cbr\u003E @body=\"I didn't fail the test. I just found 100 ways to do it wrong.\"&gt;\u003C/pre\u003E\n\u003Cp\u003ENow a quote object with Benjamin Franklin as an author had been instantiated. Again, I went on to examine my \u003Ccode\u003E@@all\u003C/code\u003E array, and found the following:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EQuote.all =&gt;[#&lt;Scraper::Quote:0x0000000002a805c8\u003Cbr\u003E  @author=\"Benjamin Franklin\",\u003Cbr\u003E  @body=\"I didn't fail the test. I just found 100 ways to do it wrong.\"&gt;,\u003Cbr\u003E #&lt;Scraper::Quote:0x0000000002a805c8\u003Cbr\u003E  @author=\"Benjamin Franklin\",\u003Cbr\u003E  @body=\"I didn't fail the test. I just found 100 ways to do it wrong.\"&gt;]\u003C/pre\u003E\n\u003Cp\u003EUhh, only one quote object had been instantiated, but now from the hash containing Benjamin Franklin as an author, and had been added to the \u003Ccode\u003E@@all\u003C/code\u003Earray twice. In both cases, namely, the \u003Ccode\u003Equotes_array\u003C/code\u003E and the \u003Ccode\u003Ereversed_quotes_array\u003C/code\u003E, only the \u003Cstrong\u003Elast element\u003C/strong\u003E in the array had been used in the initialize method to instantiate \u003Cstrong\u003Eexactly\u003C/strong\u003E \u003Cstrong\u003Eone\u003C/strong\u003E new quote object. Therefore, I found that\u003C/p\u003E\n\u003Cblockquote\u003E\u003Cem\u003E“Passing an array of hashes as an argument to the initialize method will instantiate exactly one object from the last hash in the array only.”\u003C/em\u003E\u003C/blockquote\u003E\n\u003Cp\u003EAnd so, here is the learning:\u003C/p\u003E\n\u003Cblockquote\u003E“When the initialize method is called, it will instantiate exactly one new object for that specific call.“\u003C/blockquote\u003E\n\u003Cp\u003EConsequently, in order to instantiate \u003Cstrong\u003Emany\u003C/strong\u003E objects at a time, we need to call the initialize method \u003Cstrong\u003Emany\u003C/strong\u003E times. Hence, instead of iterating twice within the initialize method to access the keys and values from the iterated hash, we will iterate over the array of hashes (the \u003Ccode\u003Equotes_array\u003C/code\u003E) in such a way that one hash at a time is passed as an argument to the initialize method. This can be accomplished with the below code:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Eclass Quote\u003Cbr\u003E  attr_accessor :body, :author  \u003Cbr\u003E  @@all = []  \u003Cbr\u003E  def initialize(quote_hash)\u003Cbr\u003E    quote_hash.each do |key, value| \u003Cbr\u003E      self.send((\"#{key}=\"), value)\u003Cbr\u003E    end     \u003Cbr\u003E    @@all &lt;&lt; self\u003Cbr\u003E  end  \u003Cbr\u003E\u003Cbr\u003E  def self.create_from_list(quotes_array)\u003Cbr\u003E    quotes_array.each {|quote_hash| self.new(quote_hash)}\u003Cbr\u003E  end  \u003Cbr\u003E  # more code...\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EThe \u003Ccode\u003E.create_from_list\u003C/code\u003E class method takes in an array of hashes as an argument, then it iterates over the array and passes one hash at a time as an argument to the initialize method, this later encapsulated within the \u003Ccode\u003Eself.new(quote_hash)\u003C/code\u003E method. When we pass our \u003Ccode\u003Equotes_array\u003C/code\u003E of two hashes (the first hash containing Benjamin Franklin and the second hash containing Abraham Lincoln) to the \u003Ccode\u003Eself.create_from_list\u003C/code\u003E method, and examine the \u003Ccode\u003E@@all\u003C/code\u003E class variable, we obtain the following results:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EQuote.create_from_list(quotes_array)\u003Cbr\u003E\u003Cbr\u003EQuote.all =&gt;\u003Cbr\u003E[\u003Cbr\u003E #&lt;Scraper::Quote:0x0000000002a80528\u003Cbr\u003E  @author=\"Benjamin Franklin\",\u003Cbr\u003E  @body=\"I didn't fail the test. I just found 100 ways to do it wrong.\"&gt;,\u003Cbr\u003E #&lt;Scraper::Quote:0x0000000002a80460\u003Cbr\u003E  @author=\"Abraham Lincoln\",\u003Cbr\u003E  @body=\u003Cbr\u003E   \"Always bear in mind that your own resolution to success is more important than any other\u003Cbr\u003E one thing.\"&gt;\u003Cbr\u003E]\u003C/pre\u003E\n\u003Cp\u003ELooking at the results, I accomplished what I wanted: two quote objects were initialized, corresponding to the two hashes in the \u003Ccode\u003Equotes_array\u003C/code\u003E. This way, we can have 100, 1000, or more hashes in our \u003Ccode\u003Equotes_array\u003C/code\u003E, and a corresponding number of quote objects will be instantiated. This is called Mass Assignment.\u003C/p\u003E\n\u003Ch2\u003ELoading Databases and Code Refactoring\u003C/h2\u003E\n\u003Cp\u003EThe main display of my command-line-interface (CLI) had the following structure:\u003Cbr\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1800/1*XZ7fMvDhvSPdc1Zl5vHAYA.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003EI wanted to have my databases loaded and my class objects already instantiated before the user entered his/her first input (more specifically, my first level scraping databases and corresponding class objects). So I created a method called \u003Ccode\u003Eload_databases\u003C/code\u003E that would load my databases and instantiate my class objects via mass assignment. The \u003Ccode\u003Eload_databases \u003C/code\u003Eis the first line of code that is executed in my CLI class, as shown in line 127 in the below picture (picture shows only a section of the CLI class):\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*763l-HTtXzU6mMv-c5ZGjQ.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eintro_display\u003C/code\u003E method (on line 128) is just a puts method for the words read in the first picture for this section. When the user enters 2, the user sees the following:\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1800/1*L6NIWhXd-oL6T5B9e_2RlQ.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003EFinally, when the user picks a category, a quote from the selected category is displayed:\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1800/1*hGQGA5frD1cAM0Qaj2lq2Q.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003ENow, assuming that the user enters 2 to go back to the main menu, then enters 2 to go to the “Quote from category” section again to get a quote from the listed categories, the user would see the following:\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*uDw2HYyOHc_WmizIwPWZDw.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003EUhh? What happened? Instead of displaying the original 5 categories, now 10 categories are displayed: the 5 original categories plus a duplicate of the 5 originals . Why is this? Well, the last method within option 2 in my \u003Ccode\u003Emain_menu_method\u003C/code\u003E (on line 140 from picture 2) will call on \u003Ccode\u003Eself.call\u003C/code\u003E (that is, \u003Ccode\u003EQuotesApp::CLI.call\u003C/code\u003E) to return to the main menu; however, calling on \u003Ccode\u003Eself.call\u003C/code\u003E invokes the \u003Ccode\u003Eload_databases\u003C/code\u003E method, and so, a new set of objects for each of my classes are created and added to the classes’ \u003Ccode\u003E@@all\u003C/code\u003E array; more specifically, duplicate objects are created for each class. In fact, every time the user decides to go back to the main menu would cause a new set of duplicates to be created. This is terrible behavior! How could I load my databases and create my class objects just the first time the CLI is called? I refactored and came up with the below solution:\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*ZEC9QeZWhZSLL-mMOM-g4A.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003EI defined a \u003Ccode\u003Erun\u003C/code\u003E instance method (on line 126) that would first, load my databases and instantiate my class objects, and then call on the \u003Ccode\u003Ecall\u003C/code\u003E method responsible for displaying information and handling user input. The solution? No user input would ever invoke my \u003Ccode\u003Eload_databases\u003C/code\u003E method, and the method would be called only once: when the CLI is first opened.\u003C/p\u003E\n\u003Cp\u003EI’ll be looking forward to learning more Ruby.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Dec 3, 2021",
    "images": [
      {
        "id": 103,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "ruby_cli_project.png",
        "s3key": null,
        "size": 33994,
        "url": "https://i.imgur.com/sXW0aQB.png"
      }
    ],
    "status": "published",
    "title": "Object-Oriented Ruby and My First Ruby Project-Quotes App",
    "url": "luismartinez/object-oriented-ruby-and-my-first-ruby-project-quotes-app-a239f211",
    "user_id": 1
  },
  {
    "id": 136,
    "abstract": "In this post I want to discuss one of the major challenges I faced in designing the post editor for ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EStabilizing Your Draft JS Wysiwyg Editor\u003C/h1\u003E\n\u003Cp\u003EIn this post I want to discuss one of the major challenges I faced in designing the post editor for \u003Ca href=\"https://devblog.dev\" target=\"_blank\"\u003E\u003Cstrong\u003EDevBlog\u003C/strong\u003E\u003C/a\u003E: stabilizing the post editor upon page refresh. As an introduction to the topic, let us talk about Draft JS first.\u003C/p\u003E\n\u003Ch2\u003EDraft JS\u003C/h2\u003E\n\u003Cp\u003E\u003Ca href=\"https://draftjs.org/\" target=\"_blank\"\u003E\u003Cstrong\u003EDraft JS\u003C/strong\u003E\u003C/a\u003E is an awesome React library for building rich text editors. However, the library is extensive, and it often involves studying the source code for implementing features. Integrating Draft JS into your react app is not that complex, however; just include the below lines in a new file in your react project (if starting from scratch, run \u003Ccode\u003Enpx create-react-app your-app-name \u003C/code\u003Ein your terminal, and make sure to run \u003Ccode\u003Enpm install draft-js\u003C/code\u003E afterwards):\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// MyEditor.js\u003Cbr\u003Eimport React from \"react\";\u003Cbr\u003Eimport {\u003Cstrong\u003EEditor\u003C/strong\u003E, EditorState} from 'draft-js';\u003Cbr\u003E\u003Cbr\u003Eclass MyEditor extends React.Component {\u003Cbr\u003E  constructor(props) {\u003Cbr\u003E    super(props);\u003Cbr\u003E    this.state = {editorState: EditorState.createEmpty()};\u003Cbr\u003E    this.onChange = editorState =&gt; this.setState({editorState});\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E render() {\u003Cbr\u003E   return (\u003Cbr\u003E      &lt;\u003Cstrong\u003EEditor\u003C/strong\u003E \u003Cbr\u003E        editorState={this.state.editorState} \u003Cbr\u003E        onChange={this.onChange} \u003Cbr\u003E      /&gt;\u003Cbr\u003E    );\u003Cbr\u003E  }\u003Cbr\u003E}\u003Cbr\u003Eexport default MyEditor;\u003Cbr\u003E\u003C/pre\u003E\n\u003Cp\u003EThen import the \u003Cem\u003EMyEditor\u003C/em\u003E component into a component that renders in a page:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// App.js\u003Cbr\u003Eimport MyEditor from \"./editor/MyEditor\";\u003Cbr\u003E\u003Cbr\u003Eexport default function App() {\u003Cbr\u003E  return (\u003Cbr\u003E    &lt;div className=\"App\"&gt;\u003Cbr\u003E      &lt;\u003Cstrong\u003EMyEditor\u003C/strong\u003E /&gt;\u003Cbr\u003E    &lt;/div&gt;\u003Cbr\u003E  );\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EFind below a codesandbox that implements the above code snippets and renders the \u003Cstrong\u003EMyEditor component\u003C/strong\u003E (the text editor) on a page.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Ciframe width=\"100%\" height=\"auto\" src=\"https://codesandbox.io/embed/fragrant-surf-qoscu?fontsize=14&hidenavigation=1&theme=dark\" frameBorder=\"0\"\u003E\u003C/iframe\u003E\n\u003Cp\u003E\u003Cbr\u003EWhat do you see? \"I see a blank page\". Well, click on the top-center of the code sandbox and start typing. What do you notice? Yes, you can write; that is not a text area, that is the Draft JS text editor.&nbsp;\u003C/p\u003E\n\u003Cp\u003EAs you may have guessed from the codesandbox, rendering the Editor component with its \u003Ccode\u003EeditorState\u003C/code\u003E and \u003Ccode\u003EonChange\u003C/code\u003E props (refer to the render section of the first code snippet) is not enough for a rich-text editing experience. Some common workarounds for this involve wrapping the editor in several &lt;div&gt;'s to which we apply CSS classes to clearly delimit the text-editing area, and adding a section to include buttons for the functionality of the text editor (such as 'bold', 'italics', 'headers', etc).&nbsp;\u003C/p\u003E\n\u003Cp\u003EThis is where the \u003Ca href=\"https://jpuri.github.io/react-draft-wysiwyg/#/\" target=\"_blank\"\u003E\u003Cstrong\u003EDraft JS Wysiwyg\u003C/strong\u003E\u003C/a\u003E  text editor comes into play (Wysiwyg stands for \"what you see is what you get\"). It is a Draft JS editor that includes some styling and comes in with a panel of built-in buttons.&nbsp;\u003C/p\u003E\n\u003Cp\u003EBefore moving on with Draft JS Wysiwyg, let us explain the previous code snippets. In the first code snippet, we import \u003Ccode\u003EEditor\u003C/code\u003E and \u003Ccode\u003EEditorState\u003C/code\u003E from the draft-js library. \u003Ccode\u003EEditor\u003C/code\u003E is a React component (it is rendered), whereas \u003Ccode\u003EEditorState\u003C/code\u003E is an immutable object that encapsulates the state of the editor, including the editor's content, selection state (\"whether it is focused, collapsed/non-collapsed, and the position of the cursor\"), and undo/redo history. It is worth noting that \"all changes to content and selection within the editor will create new \u003Ccode\u003EEditorState\u003C/code\u003E objects\". In other words, every time you type in the editor triggers an onChange event which updates the editor's state by creating a new \u003Ccode\u003EEditorState\u003C/code\u003E object. From the first code snippet, we see that the \u003Ccode\u003EEditor\u003C/code\u003E component has an editorState prop whose value corresponds to the current state of the editor, and an onChange callback that updates the editor's state by passing the editorState variable as an argument. Last, when the editor is rendered for first time, a new instance of the \u003Ccode\u003EEditorState \u003C/code\u003Eobject is created via the createEmpty() static method and rendered to the page. You can find information about \u003Ccode\u003EEditor\u003C/code\u003E and \u003Ccode\u003EEditorState\u003C/code\u003E in the \u003Ca href=\"https://draftjs.org/docs/quickstart-api-basics\" target=\"_blank\"\u003E\u003Cstrong\u003EAPI basics section\u003C/strong\u003E\u003C/a\u003E  of draft-js' official documentation, and on this \u003Ca href=\"https://learn-draftjs-now.vercel.app/simplest-editor\" target=\"_blank\"\u003E\u003Cstrong\u003Eamazing guide\u003C/strong\u003E\u003C/a\u003E  for Draft-JS.\u003C/p\u003E\n\u003Cp\u003EIn the second code snippet, the \u003Ccode\u003EMyEditor\u003C/code\u003E component, which renders our draft-js \u003Ccode\u003EEditor\u003C/code\u003E component, is rendered. We can't leave behind React hooks, so let us quickly present the hooks version for the editor component:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// MyEditor.js\u003Cbr\u003Eimport React, { useState } from \"react\";\u003Cbr\u003Eimport { Editor, EditorState } from \"draft-js\";\u003Cbr\u003E\u003Cbr\u003Efunction MyEditor() {\u003Cbr\u003E   const [editorState, setEditorState] = useState( () =&gt;\u003Cbr\u003E       EditorState.createEmpty()\u003Cbr\u003E   );\u003Cbr\u003E\u003Cbr\u003E   return (\u003Cbr\u003E      &lt;div&gt;\u003Cbr\u003E          &lt;Editor \u003Cbr\u003E             editorState={editorState} \u003Cbr\u003E             onChange={setEditorState} \u003Cbr\u003E          /&gt;\u003Cbr\u003E      &lt;/div&gt;\u003Cbr\u003E   );\u003Cbr\u003E}\u003Cbr\u003Eexport default MyEditor;\u003C/pre\u003E\n\u003Cp\u003EIn the hooks version, we define an 'editorState' state variable using the useState hook, and we initialize this variable with a new instance of the EditorState object from the draft-js library. The editorState variable is then used in the props for the \u003Cstrong\u003EEditor \u003C/strong\u003Ecomponent. You can find a working codesandbox for the above hooks version editor \u003Ca href=\"https://codesandbox.io/s/simple-draft-js-hooks-9bu9p?file=/src/App.js\" target=\"_blank\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2\u003EDraft JS Wysiwyg\u003C/h2\u003E\n\u003Cp\u003ENow, let us introduce the \u003Ca href=\"https://jpuri.github.io/react-draft-wysiwyg/#/\" target=\"_blank\"\u003E\u003Cstrong\u003Edraft-js Wysiwyg editor\u003C/strong\u003E\u003C/a\u003E  (created by developer Jyoti Puri). It's worth noting that the Wysiwyg editor is built on top of the draft-js editor detailed in the previous section. To get started with the Wysiwyg editor, we include the below lines in a new file:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// WysiwygEditor.js\u003Cbr\u003Eimport React, { Component } from \"react\";\u003Cbr\u003Eimport { EditorState } from \"draft-js\";\u003Cbr\u003Eimport { Editor } from \"react-draft-wysiwyg\";\u003Cbr\u003Eimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\u003Cbr\u003E\u003Cbr\u003Eclass WysiwygEditor extends Component {\u003Cbr\u003E  constructor(props) {\u003Cbr\u003E    super(props);\u003Cbr\u003E    this.state = {\u003Cbr\u003E      editorState: EditorState.createEmpty()\u003Cbr\u003E    };\u003Cbr\u003E  }\u003Cbr\u003E \u003Cbr\u003E  onEditorStateChange(editorState) {\u003Cbr\u003E    this.setState({\u003Cbr\u003E      editorState\u003Cbr\u003E    });\u003Cbr\u003E  }\u003Cbr\u003E\u003Cbr\u003E  render() {\u003Cbr\u003E    const { editorState } = this.state;\u003Cbr\u003E    return (\u003Cbr\u003E      &lt;Editor\u003Cbr\u003E        editorState={editorState}\u003Cbr\u003E        wrapperClassName=\"\"\u003Cbr\u003E        editorClassName=\"\"\u003Cbr\u003E        onEditorStateChange={(editorState) =&gt; this.onEditorStateChange(editorState) }\u003Cbr\u003E      /&gt;\u003Cbr\u003E    );\u003Cbr\u003E  }\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003Eexport default WysiwygEditor;\u003C/pre\u003E\n\u003Cp\u003EThen we import the WysiwygEditor component in a component that renders in a page:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// App.js\u003Cbr\u003Eimport WysiwygEditor from \"./editor/WysiwygEditor\";\u003Cbr\u003Eimport \"./styles.css\";\u003Cbr\u003Eexport default function App() {\u003Cbr\u003E  return (\u003Cbr\u003E    &lt;div className=\"App\"&gt;\u003Cbr\u003E      &lt;WysiwygEditor /&gt;\u003Cbr\u003E    &lt;/div&gt;\u003Cbr\u003E  );\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EMake sure to run \u003Ccode\u003Enpm install react-draft-wysiwyg\u003C/code\u003E and \u003Ccode\u003Enpm install draft-js\u003C/code\u003E for the code to work.  The above code snippets render the below component:\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Ciframe width=\"100%\" height=\"auto\" src=\"https://codesandbox.io/embed/draft-js-wysiwyg-vzoef?fontsize=14&hidenavigation=1&theme=dark\" frameBorder=\"0\"\u003E\u003C/iframe\u003E\n\u003Cp\u003E\u003Cbr\u003ENice, isn't it? Scroll down on the sandbox and click on the top section of the blank space, then start typing. You can then play around with the buttons to add styling to your text. Now if you click on the sandbox's square-arrow button to preview the page in a new window, you'll notice that the editor occupies the full area of the page, which is not desirable (in most cases). To fix this, we'll make use of the built-in wrapperClassName and editorClassName props of the Editor component (whose values are empty strings currently; refer to the WysiwygEditor.js code snippet) plus some other props. The wrapper class wraps both, the buttons panel and the text editing area; the editor class wraps the text-editing area. We will add the following in the return section of the editor component:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// some code\u003Cbr\u003E&lt;div className=\"\u003Cstrong\u003Etext-editor\u003C/strong\u003E\"&gt;\u003Cbr\u003E  &lt;Editor\u003Cbr\u003E editorState={editorState}\u003Cbr\u003E wrapperClassName=\"\u003Cstrong\u003Ewrapper-class\u003C/strong\u003E\"         \u003Cbr\u003E    editorClassName=\"\u003Cstrong\u003Eeditor-class\u003C/strong\u003E\"\u003Cbr\u003E    toolbarClassName=\"\u003Cstrong\u003Etoolbar-class\u003C/strong\u003E\"\u003Cbr\u003E onEditorStateChange={(editorState) =&gt; this.onEditorStateChange(editorState) }\u003Cbr\u003E      /&gt;\u003Cbr\u003E&lt;div&gt;\u003Cbr\u003E// more code\u003C/pre\u003E\n\u003Cp\u003EThen, in the main CSS file for our app we'll add the styles for each class name (in \u003Cem\u003EApp.css\u003C/em\u003E file for a create-react-app):\u003C/p\u003E\n\u003Cpre\u003E```css\u003Cbr\u003E.textEditor{\u003Cbr\u003E  padding-top: 2rem;\u003Cbr\u003E  padding-bottom: 2rem;\u003Cbr\u003E  max-width: 736px;\u003Cbr\u003E  margin-left: auto;\u003Cbr\u003E  margin-right: auto;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E.wrapper-class {\u003Cbr\u003E  padding: 1rem;\u003Cbr\u003E  border: 1px solid #ccc;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E.editor-class {\u003Cbr\u003E  background-color: lightgray;\u003Cbr\u003E  padding: 1rem;\u003Cbr\u003E  border: 1px solid #ccc;\u003Cbr\u003E}\u003Cbr\u003E\u003Cbr\u003E.toolbar-class{\u003Cbr\u003E  border: 1px solid lightgray;\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EAnd we get the below component:\u003C/p\u003E\n\u003Cimg src=\"https://i.imgur.com/epZtlx1.pngdeleteHash4E4RfxnaX7VKnnA\" alt=\"undefined\" style=\"height: auto;width: 100%\"/\u003E\n\u003Cp\u003EThe editor is now centralized and it does not take the full page area; the text-editing area has a background color, and there are borders for the editor and the buttons panel. Nice!! You can definitely play with the CSS for more styling. You can also refer to this \u003Ca href=\"https://blog.logrocket.com/building-rich-text-editors-in-react-using-draft-js-and-react-draft-wysiwyg/\" target=\"_blank\"\u003E\u003Cstrong\u003Eawesome blog post\u003C/strong\u003E\u003C/a\u003E  for more detailed styling for the editor.  A working codesandbox for this styled Wysiwyg editor can be \u003Ca href=\"https://codesandbox.io/s/jovial-jennings-z2w0b?file=/src/editor/WysiwygEditorWithStyling.js\" target=\"_blank\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E, and the hooks version codesandbox can be found \u003Ca href=\"https://codesandbox.io/s/draft-js-wysiwygwithstyling-hooks-j3mx2?file=/src/editor/WysiwygEditorWithStylingHooks.js\" target=\"_blank\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E .\u003C/p\u003E\n\u003Ch2\u003EData Persistence\u003C/h2\u003E\n\u003Cp\u003EBlog posts in \u003Ca href=\"https://devblog.dev\" target=\"_blank\"\u003E\u003Cstrong\u003EDevBlog\u003C/strong\u003E\u003C/a\u003E\u003Cstrong\u003E  (\u003C/strong\u003Eincluding this blog post) are written using a Draft JS Wysiwyg editor.  So, after we write on the editor, we need a way to save the editor's contents to a database, that we can later query to display the blog post. The EditorState object of draft-js (which stores the contents of the editor) counts with a list of instance methods and static methods that can be used to manipulate or extract specific data from the editor's state. We will use a combination of these methods and other libraries to persist the editor's contents to a database. This is the roadmap that we'll follow to achieve this:\u003C/p\u003E\n\u003Cblockquote\u003E•     editorState ------&gt; HTML --------&gt; database (API)\u003Cbr\u003E \u003Cbr\u003E                                               and\u003Cbr\u003E\u003Cbr\u003E•  database(API) -------&gt; HTML -------&gt; editorState\u003C/blockquote\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003EThe relevant code for the roadmap will be included, but a full discussion of the roadmap is treated in my blog post \u003Ca href=\"https://devblog.dev/posts/155\" target=\"_blank\"\u003EPersisting Your Draft JS Wysiwyg Editor's Data To Your Back End\u003C/a\u003E . Let us consider the below lines of code to analyze how we can use the blog post data that we obtain from our API to load it into the editor:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// WysiwygDataPersistence.js\u003Cbr\u003Eimport React, { useState } from \"react\";\u003Cbr\u003Eimport { EditorState, ContentState, convertToRaw } from \"draft-js\";\u003Cbr\u003Eimport { Editor } from \"react-draft-wysiwyg\";\u003Cbr\u003Eimport { convertFromHTML } from \"draft-convert\";\u003Cbr\u003Eimport { useParams, useLocation } from \"react-router-dom\";\u003Cbr\u003E\u003Cbr\u003Efunction WysiwygDataPersistence({\u003Cstrong\u003Eposts\u003C/strong\u003E}) {\u003Cbr\u003E   const routeParams = useParams();\u003Cbr\u003E   const location  = useLocation();\u003Cbr\u003E   const [title, setTitle] = useState(\"\");\u003Cbr\u003E\u003Cbr\u003E   const [editorState, setEditorState] = useState(\u003Cbr\u003E      () =&gt; {\u003Cbr\u003E         if(location.pathname === \"/posts/new\") {\u003Cbr\u003E \u003Cstrong\u003Ereturn EditorState.createEmpty();\u003C/strong\u003E\u003Cbr\u003E         } else if(routeParams.postId){\u003Cbr\u003E            const currentPost = posts &amp;&amp; posts.find( ({id}) =&gt; `${id}`=== routeParams.postId)\u003Cbr\u003E           setTitle(currentPost.title)\u003Cbr\u003E \u003Cstrong\u003Ereturn EditorState.createWithContent(convertFromHTML(currentPost.body))\u003C/strong\u003E\u003Cbr\u003E         }\u003Cbr\u003E      }\u003Cbr\u003E   );\u003Cbr\u003E// more code\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EIn the above code snippet, the WysiwygDataPersistence component takes an incoming posts array as props. Then in the useState hook for the editorState variable, we use the location hook from react router v6 in a callback arrow function to determine whether the editor is being loaded to create a new post or to edit an existing post. If creating a new post, we simply use the static method \u003Cstrong\u003EcreateEmpty\u003C/strong\u003E on the EditorState object from draft-js (the same method used in the two previous sections) to initialize a blank editor; if editing a post, we use the \u003Cstrong\u003EconvertFromHTML\u003C/strong\u003E function from draft-convert on the incoming HTML blog post data, then we call the \u003Cstrong\u003EcreateWithContent\u003C/strong\u003E method to transform the results of the previous function into a immutable object used by the draft-js editor. Below is a codesandbox that contains a fully working prototype for a blog website that uses the draft-js wysiwyg editor along with an API for data persistence. In this prototype, you can read, create, edit, and delete posts, and the changes are saved. [Note: if you see a 502 error message in the codesandbox, refresh this page, and the codesandbox should load properly; if it still does not work, open the codesandbox, wait a minute for the scripts to run, and click on the refresh page button in the condesandbox's internal browser]\u003C/p\u003E\n\u003Ciframe width=\"100%\" height=\"auto\" src=\"https://codesandbox.io/embed/blog-website-prototype-p4lwp?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fpages%2FHomePage.js&theme=dark\" frameBorder=\"0\"\u003E\u003C/iframe\u003E\n\u003Cp\u003E\u003Cbr\u003EThe full code for this post editor includes 90+ lines, and the code is fully explained in the previously mentioned \u003Ca href=\"https://devblog.dev/posts/155\" target=\"_blank\"\u003Epost\u003C/a\u003E. The repository for the above codesandbox can be found \u003Ca href=\"https://github.com/mmartinezluis/blog-website-prototype\" target=\"_blank\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E.&nbsp;&nbsp;\u003C/p\u003E\n\u003Ch2\u003EStabilizing the Editor\u003C/h2\u003E\n\u003Cp\u003ENow we are in the last section of this post. Our previous editor can successfully save the contents of a post and can be successfully initialized with the contents of a previously saved post. Now I'll invite to go to the previous code sandbox and click on the button for \"Open preview in new window\", then click on a post, click on \"Edit\" (this will open and load the editor with the post), and then click on the refresh page button. What do you see happens after refreshing the page? ... \u003Cem\u003Ethe editor crashes\u003C/em\u003E!!!!  That is, the editor is not stable on page refresh. So, after many failed attempts, for many days, for many hours, I was finally able to come up with code that stabilizes the editor on page refresh. This will probably not the only way to achieve the desired result; however, it is the solution I came up with.&nbsp;\u003C/p\u003E\n\u003Cp\u003EWhen starting the editor with some content, the content cannot be \u003Cstrong\u003Eundefined\u003C/strong\u003E or \u003Cstrong\u003Enull\u003C/strong\u003E, more specifically, the \u003Cstrong\u003Eargument\u003C/strong\u003E in this line of code \u003Ccode\u003EEditorState.createWithContent(\u003C/code\u003E\u003Ccode\u003E\u003Cstrong\u003Eargument\u003C/strong\u003E\u003C/code\u003E\u003Ccode\u003E)\u003C/code\u003E cannot be undefined, otherwise, the editor will break on startup. This line of code is executed when the editor is started with an already existing post and we want to edit the post. When the browser is refreshed while editing a post, the app reinitializes and, because we are getting our post data from our back end asynchronously, the post is not immediately available and is therefore \u003Cstrong\u003Eundefined\u003C/strong\u003E; hence, when the above line of code is executed, the editor crashes.&nbsp;\u003C/p\u003E\n\u003Cblockquote\u003EThe solution: create a dummy state for the editor to start with until we get the data from our back end. Once the data arrives, replace the dummy state with the received data.\u003Cbr\u003E\u003C/blockquote\u003E\n\u003Cp\u003ELet us see this solution in code:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// WysiwygStable.js\u003Cbr\u003E\u003Cem\u003E// ...code for importing the required modules\u003C/em\u003E\u003Cbr\u003Efunction WysiwygStable({posts}) {\u003Cbr\u003E  const routeParams = useParams();\u003Cbr\u003E  const location  = useLocation();\u003Cbr\u003E  const navigate = useNavigate();\u003Cbr\u003E  const [title, setTitle] = useState(\"\");\u003Cbr\u003E  const [post, setPost] = useState({body: \"&lt;p&gt;Loading content...&lt;/p&gt;\"})\u003Cbr\u003E \u003Cbr\u003E  const loadedPost = useCallback( () =&gt; {\u003Cbr\u003E    return posts &amp;&amp; posts.find( post =&gt; `${post.id}` === routeParams.postId)\u003Cbr\u003E  },[posts, routeParams])\u003Cbr\u003E\u003Cbr\u003E  const loadedInitialEditorState = useCallback( () =&gt; (EditorState.createWithContent(convertFromHTML(post.body))\u003Cbr\u003E  ),[post])\u003Cbr\u003E\u003Cbr\u003E  const reinitializeState = useCallback ((argument) =&gt; {\u003Cbr\u003E    const blocksFromHTML = htmlToDraft(argument?.body);\u003Cbr\u003E    const { contentBlocks, entityMap} = blocksFromHTML\u003Cbr\u003E    const contentState = ContentState.createFromBlockArray(contentBlocks, entityMap);\u003Cbr\u003E    return EditorState.createWithContent(contentState)\u003Cbr\u003E  },[])\u003Cbr\u003E\u003Cbr\u003E  useEffect( () =&gt; {\u003Cbr\u003E    if (location.pathname !== \"/posts/new\" &amp;&amp; posts) {\u003Cbr\u003E      const content = loadedPost()\u003Cbr\u003E      setTitle(content.title)\u003Cbr\u003E      setPost(content)\u003Cbr\u003E      setEditorState(reinitializeState(content))\u003Cbr\u003E    }\u003Cbr\u003E    },[location, loadedPost, reinitializeState, posts]\u003Cbr\u003E  )\u003Cbr\u003E\u003Cbr\u003E  const [editorState, setEditorState] = useState(() =&gt; {\u003Cbr\u003E    if(location.pathname === \"/posts/new\") {\u003Cbr\u003E      return reinitializeState({body: \"\"})\u003Cbr\u003E    } else {\u003Cbr\u003E      return loadedInitialEditorState()\u003Cbr\u003E    }\u003Cbr\u003E  });\u003Cbr\u003E  // more code\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EBefore explaining the code, let's explain the big picture of the code: we want to define two variables related to a post; one variable will define a dummy post, and the other variable will hold the post that we want to edit. We will load the editor with the dummy post, then we will use an useEffect hook to replace the dummy post with the real post once we have received our post data from the back end.&nbsp;\u003C/p\u003E\n\u003Cp\u003ENow let us go with the code. We set a \u003Cstrong\u003Epost \u003C/strong\u003Evariable using the useState hook and initialize it with a dummy post object, \u003Ccode\u003E {body: \"&lt;p&gt;Loading content...&lt;/p&gt;\"}\u003C/code\u003E. This is our dummy post variable. We also define a \u003Cstrong\u003EloadedPost\u003C/strong\u003E variable using the useCallback hook, and set it equal to the post that we want to edit, coming from our back end. When the page is refreshed, the post variable is a post object, whereas the \u003Cstrong\u003EloadedPost\u003C/strong\u003E variable is \u003Cem\u003Eundefined\u003C/em\u003E until we get the post data from our back end. We then define a \u003Cstrong\u003EloadedInitialEditorState\u003C/strong\u003E  function with the useCallback hook which initializes the editor with our dummy post from the \u003Cstrong\u003Epost\u003C/strong\u003E variable. At this point, if we refresh the browser, the editor will show \"\u003Cem\u003ELoading content...\u003C/em\u003E\".  We are now half way through the stabilizing process. What we need to do next is to replace this dummy post with the real post from our back end using the setEditorState variable from the useState hook present in the last block of the code snippet. To achieve this, we define a  \u003Cstrong\u003EreinitializeState\u003C/strong\u003E function with the useCallback hook. The job of this function is to take a post object with content in HTML, transform the HTML into data readable to the Draft JS editor through a series of functions and methods, and return a new EditorState object that is initialized using the transformed data. To make use of this reinitializeState function, we define an useEffect hook. In this hook, we check whether we are loading the editor to edit an existing post. If so, we call the \u003Cstrong\u003EreinitializeState \u003C/strong\u003Efunction with an argument equal to the post object returned by the \u003Cstrong\u003EloadedPost\u003C/strong\u003E variable (this is the post coming from our back end), and we set the editorState variable used by the editor equal to the EditorState object returned by the \u003Cstrong\u003EreinitializeState \u003C/strong\u003Efunction; that is , we use this line of code:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003EsetEditorState(reinitializeState(loadedPost()))\u003C/pre\u003E\n\u003Cp\u003EThis will replace the contents of the editor with the data from the post to be edited. At this point, we have a stable editor on page refresh. You can even do a hard refresh on the browser (for Mac users,  press shift + command + R), and the editor swiftly changes from \"Loading content...\"  to your editing post without breaking.\u003C/p\u003E\n\u003Cp\u003EYou can find a codesandbox with the stable Wysiwyg editor \u003Ca href=\"https://codesandbox.io/s/blog-website-prototype-stable-53qnq?file=/src/index.js\" target=\"_blank\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E  ; you can find the source code for both, the data persistence editor and the stable editor in this \u003Ca href=\"https://github.com/mmartinezluis/blog-website-prototype\" target=\"_blank\"\u003E\u003Cstrong\u003Erepository\u003C/strong\u003E\u003C/a\u003E .\u003C/p\u003E\n\u003Cp\u003EI hope you have found this post useful. For the moment, DevBlog does not include comments for blog posts, but I'll be adding this functionality soon.&nbsp;\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Oct 4, 2021",
    "images": [
      {
        "id": 100,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "stabilize-a-small-business-csp-saas-daas-cyberlinkasp.jpeg",
        "s3key": null,
        "size": 115239,
        "url": "https://i.imgur.com/CpFKmPU.jpeg"
      }
    ],
    "status": "published",
    "title": "Stabilizing Your Draft JS Wysiwyg Editor",
    "url": "luismartinez/stabilizing-your-draft-js-wysiwyg-editor-4bdb1d55",
    "user_id": 1
  },
  {
    "id": 134,
    "abstract": "The editor now supports embedding websites or, more specifically, iframes. Find below a sample code that I wrote in a codesanbox environment.",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EPost With an Embedded Website\u003C/h1\u003E\n\u003Cp\u003EThe editor now supports embedding websites or, more specifically, iframes. Find below a sample code that I wrote in a codesanbox environment.\u003C/p\u003E\n\u003Ciframe width=\"100%\" height=\"auto\" src=\"https://codesandbox.io/embed/flatiron-final-coding-problem-s704m?fontsize=14&hidenavigation=1&theme=dark\" frameBorder=\"0\"\u003E\u003C/iframe\u003E\n\u003Cp\u003EThe supported (allowed) websites are the following:&nbsp;\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003Ecodesandbox.io\u003C/li\u003E\n\u003Cli\u003Ecodepen.io\u003C/li\u003E\n\u003Cli\u003Ejsfiddle.net\u003C/li\u003E\n\u003Cli\u003Eplaycode.io\u003C/li\u003E\n\u003Cli\u003Ejsbin.com\u003C/li\u003E\n\u003Cli\u003Ecodeshare.io\u003C/li\u003E\n\u003Cli\u003Egithub.com\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Oct 1, 2021",
    "images": [],
    "status": "published",
    "title": "Post With an Embedded Website",
    "url": "luismartinez/post-with-an-embedded-website-256028fd",
    "user_id": 1
  },
  {
    "id": 120,
    "abstract": "I have downloaded so many apps that give me the option to login using facebook. I never really gave it much thought, all I knew is that it made my life a little simpler …",
    "author_name": "Cathy D",
    "body": "\u003Ch1\u003E\u003Cspan style=\"font-family: Times New Roman;\"\u003EOmniauth Authentication with Google\u003C/span\u003E\u003C/h1\u003E\n\u003Cp\u003EI have downloaded so many apps that give me the option to login using facebook. I never really gave it much thought, all I knew is that it made my life a little simpler.\u003C/p\u003E\n\u003Cp\u003EAfter working on my rails project, I now understand how developers were able to do that. With a little bit of rails magic, a little bit of code, and a little bit of patience.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--l-nrlFh_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpkhs3nvkkkow1qh9ujg.gif\" alt=\"Alt Text\" style=\"height: undefined;width: undefined\"/\u003E\u003C/p\u003E\n\u003Cp\u003E(hehe)\u003C/p\u003E\n\u003Cp\u003EI started with OmniAuth by adding the appropriate gems needed to my Gemfile.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--StHq2sJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ixnpsflzfm0efkpc0hn9.png\" alt=\"Alt Text\" style=\"height: undefined;width: undefined\"/\u003E\u003C/p\u003E\n\u003Cp\u003EOnce these are in your Gemfile, run:\u003C/p\u003E\n\n\u003Cp\u003E[OmniAuth can be set up with other websites, so these gems\u003Cbr\u003Emight look a little different, some examples:\u003C/p\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"https://github.com/simi/omniauth-facebook\" target=\"_self\"\u003Ehttps://github.com/simi/omniauth-facebook\u003C/a\u003E\u003C/li\u003E\n\u003Cli\u003E\u003Ca href=\"https://github.com/omniauth/omniauth-github\" target=\"_self\"\u003Ehttps://github.com/omniauth/omniauth-github\u003C/a\u003E ]\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EFrom here, I went to my config/routes.rb file and added the line of code below\u003C/p\u003E\n\n\u003Cp\u003EThe best way I can explain this is by letting someone else explain it. 😅\u003C/p\u003E\n\u003Cp\u003E\"Now let’s return to the Callback URL. This is the URL\u003Cbr\u003Ewhere a user will be redirected to inside the app after\u003Cbr\u003Esuccessful authentication and approved authorization\u003Cbr\u003E(the request will also contain user’s data and token).\u003Cbr\u003EAll OmniAuth strategies expect the callback URL to equal\u003Cbr\u003Eto “/auth/:provider/callback”. :provider takes the name\u003Cbr\u003Eof the strategy (“twitter”, “facebook”, “linkedin”,\u003Cbr\u003Eetc.) as listed in the initializer.\"\u003C/p\u003E\n\u003Cp\u003EIn case anyone is interested in reading more:\u003Cbr\u003E\u003Ca href=\"https://www.sitepoint.com/rails-authentication-oauth-2-0-omniauth/\" target=\"_self\"\u003Ehttps://www.sitepoint.com/rails-authentication-oauth-2-0-omniauth/\u003C/a\u003E\u003C/p\u003E\n\u003Cp\u003ENext.\u003Cbr\u003EIn my config/initializers/omniauth.rb\u003Cbr\u003EI registered a new provider, google, by providing a key pair that will identify the app to the provider.\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0PkV4mBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgpco9wqlgd9irlf2hdm.png\" alt=\"Alt Text\" style=\"height: undefined;width: undefined\"/\u003E\u003C/p\u003E\n\u003Cp\u003EThe two keys \"GOOGLE_CLIENT_ID\" and \"GOOGLE_CLIENT_SECRET\" are then saved in an .env file which I stored in a .gitignore file to keep them from being pushed to my GitHub.\u003C/p\u003E\n\u003Cp\u003E\u003Cstrong\u003EThe website I added right above also explains how to get\u003Cbr\u003Ethese keys from different apps\u003C/strong\u003E\u003C/p\u003E\n\u003Cp\u003ELastly, in my views/sessions/login.html.erb\u003Cbr\u003EI add the button necessary to let my user sign in using their Google account. Show below:\u003C/p\u003E\n\u003Cp\u003E\u003Cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5OjvYkOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7lj1v20v9y7u0roie8q.png\" alt=\"Alt Text\" style=\"height: undefined;width: undefined\"/\u003E\u003C/p\u003E\n\u003Cp\u003EAnd \u003Cstrong\u003ETADAHHHH✨\u003C/strong\u003E\u003Cbr\u003E\u003Cimg src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--aVVsMk5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xitzqky2bkqscqcfyi76.png\" alt=\"Alt Text\" style=\"height: undefined;width: undefined\"/\u003E\u003C/p\u003E\n\u003Ch6\u003E\u003Cem\u003EI have a working login from another provider\u003C/em\u003E\u003C/h6\u003E\n\u003Cp\u003E\u003Cem\u003E-Diazc1\u003C/em\u003E\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Sep 10, 2021",
    "images": [],
    "status": "published",
    "title": "Omniauth Authentication with Google",
    "url": "cathyd/omniauth-authentication-with-google-3bf021d0",
    "user_id": 2
  },
  {
    "id": 11,
    "abstract": "During my second milestone project at Flatiron’s software engineering program I took the challenge of building an online store from scratch. I had some general ideas on how to get started from doing the Sinatra labs, but I decided not to read or watch any tutorials on the topic, just to see how far I could get. In this article I would like to share the most relevant moments in my journey of building my online store app, ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EBuilding an Online Store\u003C/h1\u003E\n\u003Cp\u003EDuring my second milestone project at Flatiron’s software engineering program I took the challenge of building an online store from scratch. I had some general ideas on how to get started from doing the Sinatra labs, but I decided not to read or watch any tutorials on the topic, just to see how far I could get. In this article I would like to share the most relevant moments in my journey of building my online store app, \u003Cstrong\u003E\u003Cem\u003ESellBy\u003C/em\u003E\u003C/strong\u003E, using Sinatra and the MVC framework in Ruby. [Note: this is one of my Medium articles transferred to DevBlog. You can find the original medium article \u003Ca href=\"https://luis-mmartinez.medium.com/building-an-online-store-79708e5a71c6\" target=\"_blank\"\u003Ehere\u003C/a\u003E  for comparison purposes]\u003C/p\u003E\n\u003Ch2\u003EActiveRecord Migrations and Associations\u003C/h2\u003E\n\u003Cp\u003EThe first thing to get started was to decide on the models that I would need for building the app and their corresponding associations. After some thought, I arrived at three models: \u003Cstrong\u003EUser\u003C/strong\u003E, \u003Cstrong\u003EItem\u003C/strong\u003E, and \u003Cstrong\u003ECart\u003C/strong\u003E. The models and their corresponding associations are shown in the below diagram:\u003Cbr\u003E&nbsp;\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1104/1*PyMwnltRPIjDGWg3bTGsWw.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 2. Schema diagram for SellBy.\u003C/sup\u003E\u003Cbr\u003E\u003Cbr\u003EAs seem in the schema diagram, a user has many items, an item belongs to a user, a user has one cart, and a cart belongs to a user. The status column for items is an integer and it is used to create two enumerators: listing and purchased. The items column for the carts table is a string because it will be later serialized as an array (more on this in the last section of the article).\u003C/p\u003E\n\u003Ch2\u003EArchitecture of the Life Cycle of an Item Object\u003C/h2\u003E\n\u003Cp\u003EOne of the greatest challenges in building the online store was the design of the life cycle of an item object, that is, how to perform the CRUD actions on an item object effectively. From my experience in writing the code, I found that the id attribute of an item is mostly useful for the GET, EDIT, and DELETE actions; other than that, you need to rely on the other item’s properties for performing operations on an item. Before moving on, I want to specify that \u003Cstrong\u003E\u003Cem\u003ESellBy\u003C/em\u003E\u003C/strong\u003E performs both functionalities: a user can purchase items from other users, and a user can sell items to other users., which is something to keep in mind in reading the remainder part of this article as the article is developed under this context.\u003C/p\u003E\n\u003Cp\u003ETo continue, this is the design I came up with for the life cycle of an item:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EUpon instantiation, items are assigned a status of “listing” by default (the one more status is “purchased”). That is, when a user creates an item, the item is ready to be sold.\u003C/li\u003E\n\u003Cli\u003ERather than referring to individual item objects, items live under the umbrella of ‘Listings’. For example, when a user fills out the form to create new items in SellBy, they create a listing that has an item name, an item price, and an item stock.\u003C/li\u003E\n\u003Cli\u003EUpon creation of a new listing, a corresponding number of \u003Cstrong\u003Enew item objects\u003C/strong\u003E as specified in the item stock number are instantiated and persisted to the database. To expand on this, consider figure 3 below:\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1400/1*Cxa3Tm5LBTOM8DJbHpq3bA.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 3. Form for creating new item objects in SellBy.\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EUpon click on “Create Listing”, a total of 9 item objects will be instantiated; the only difference between these item objects will be their id; basically, 9 copies of Soap items are created.\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EAfter creation, updating an item presents some challenges, discussed in the next paragraphs.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EWhat happens if we want to change (update) the stock for the above Soaps from 9 to 12 ? (Compare figure 3 and figure 4 below)\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1400/1*89w1gfd1mBpsEaC3ESvllg.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 4. Updating the stock for a listing in SellBy.\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EThis is the solution I came up with: count the number of soaps currently on the database for the user (an item belongs to a user), then subtract this number from the stock submitted in the form, that is, 12 –9 = 3. This means we need to create 3 new soap objects to get the 12 soaps. To accomplish this, upon the user clicking on “Update Listing”, find a copy of a soap item (it does not matter which one), then use the attributes of that soap item to create 3 new (identical) soap items or use the params from the form.\u003C/p\u003E\n\u003Cp\u003ENow, what if we want to change (update) the stock for the soaps from 9 to 5? Similar procedure as above: count the number of soaps currently on the database for the user, then subtract the stock number submitted in the form from the current stock, that is, 9 –5 = 4. What does this mean? This means that we want to destroy 4 copies of the soap object so that the new stock is 5. To accomplish this, upon the user clicking on “Update Listing”, find all copies for the soap object for the user and destroy 4 of them.\u003C/p\u003E\n\u003Cp\u003EThe next one is (\u003Cstrong\u003Ethis is the\u003C/strong\u003E \u003Cstrong\u003Egeneralization\u003C/strong\u003E): What happens if we don’t want the name “Soap” anymore, but rather we want to change the name to “Soap Aromatic Fragrance”, with a price of $8.50 and a stock of 6? That is, what happens if we want to \u003Cstrong\u003EUPDATE \u003C/strong\u003Ethe item name, the item price, and the item stock of a listing? (Compare figure 4 and figure 5 below)\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1400/1*tfpSwyZIBtog0Mhd-LPDyw.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 5. Updating all properties of a listing in SellBy\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EThis is the solution I came up with: \u003Cstrong\u003Etake care of the item properties first and leave the stock last\u003C/strong\u003E. That is, find all copies of the Soap item for the user, change the name and price of all of these copies to the name and price submitted in the form (do a \u003Ccode\u003E.save\u003C/code\u003E for each item right after changing the name and the price); then if the stock submitted in the form is GREATER than the stock of the updated items, CREATE new copies using one of the updated soap items or the form params; otherwise, if the stock from the form is LESS than the original stock, DESTROY a corresponding number of the updated soap items (no more “Soap” but “Soap Aromatic Fragrance”).\u003C/p\u003E\n\u003Cp\u003ELet’s see: What would be the action for going from \u003Cstrong\u003Efigure 4 \u003C/strong\u003Eto\u003Cstrong\u003E figure 5\u003C/strong\u003E? (\u003Cem\u003EThere are possibly more ways of doing this, but this is the one I came up with; please let me know in the comments if you know other ones\u003C/em\u003E):\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFind all copies of “\u003Cstrong\u003ESoap\u003C/strong\u003E” for the (current) user in the database.\u003C/li\u003E\n\u003Cli\u003EChange the name and price of all these copies from “Soap”, $3.25 TO “\u003Cstrong\u003ESoap Aromatic Fragrance\u003C/strong\u003E”, \u003Cstrong\u003E$8.50\u003C/strong\u003E and do \u003Ccode\u003E.save\u003C/code\u003E for each. The stock does not change (we have the same 12 objects still)\u003C/li\u003E\n\u003Cli\u003EThen, since New stock (from form)(6) is less than Original stock(12), we are going to \u003Cstrong\u003Edestroy 6 copies\u003C/strong\u003E of the updated soap items; otherwise, we create copies for Soap Aromatic Fragrance, either using one of the updated ones or using the params from the form.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003ELast, when an item is purchased, the status column of the item object is changed from “listing” to “purchased”.\u003C/p\u003E\n\u003Cp\u003EHope this can be of help. Now let us go ahead with the shopping cart.\u003C/p\u003E\n\u003Ch2\u003EThe Shopping Cart\u003C/h2\u003E\n\u003Cp\u003EAs seen in the schema diagram from figure 2, there is no association between Item and Cart. Why not? (Again, there are likely more ways of modeling the cart) Well, suppose that we did establish an association between Cart and Item, say, Cart \u003Ccode\u003Ehas_many :items, through: :cart_items\u003C/code\u003E, and Item \u003Ccode\u003Ehas_many :carts, through: :cart_items\u003C/code\u003E. Then say that I add an item to my cart, as shown below\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1400/1*Hto0Jofrs2NjtFDPP3veVA.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 6. Shopping cart view in SellBy.\u003C/sup\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cp\u003EFrom the above figure, my cart has 4 “\u003Cstrong\u003EWorld Languages Book\u003C/strong\u003E” objects, that is, \u003Ccode\u003Ecart.items\u003C/code\u003E yields an array of 4 item objects. Now suppose that I close the app in my desktop and go outside to do some things. While outside, the seller of this item (which is another user) updates the name of the item to “\u003Cstrong\u003ESocial Studies Book\u003C/strong\u003E”. Then I come back an hour later, open my desktop and go to my cart view. What am I going to see? I’m going to see “\u003Cstrong\u003ESocial Studies Book\u003C/strong\u003E”, and I’l be asking myself why the name of the item in my cart changed. That is, changing the database changes the cart’s content. That is not desirable. How do we solve this? I came up with the following solution: we need the cart to be in a FROZEN STATE, independent of the database. Instead of \u003Ccode\u003Ecart.items\u003C/code\u003E yielding an \u003Cstrong\u003E\u003Cem\u003EActiveRecord Association\u003C/em\u003E\u003C/strong\u003E\u003Cstrong\u003E array\u003C/strong\u003E, we want \u003Ccode\u003Ecart.items\u003C/code\u003Eto be a \u003Cstrong\u003Eplain ruby array\u003C/strong\u003E, without ActiveRecord, and this will give us a frozen state for the cart: once an item is pushed to the \u003Ccode\u003Ecart.items\u003C/code\u003E array, the array won’t change even if the pushed item is updated at a later time, and the user will see the same item from the last time the user viewed the cart.\u003C/p\u003E\n\u003Cp\u003ETo create an \u003Cstrong\u003Eitems\u003C/strong\u003E array for the Cart model, we use the ‘\u003Cstrong\u003Eserialize\u003C/strong\u003E’ keyword on the Cart model, as shown below:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Eclass Cart &lt; ActiveRecord::Base\u003Cbr\u003E  belongs_to :user\u003Cbr\u003E  serialize :items, Array  \u003Cbr\u003E  # more code\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EFrom the schema from figure 2, carts has an \u003Ccode\u003Eitems \u003C/code\u003Ecolumn set to “string”. The serialize method is used on this column in the model to change the column from a string to an array. Then when we call, say, \u003Ccode\u003Efred.cart.items\u003C/code\u003E we will get a plain ruby array that we can push items to.\u003C/p\u003E\n\u003Cp\u003ETo finalize, how do we update items from the \u003Ccode\u003Ecart.items\u003C/code\u003E array? I came up with this solution: when the user first clicks on the “Add to Cart” button for an item, push the item object to the user’s \u003Ccode\u003Ecart.items\u003C/code\u003E array. Then, when the user wants to update the item quantity in the cart, say, for example, from 1 to 4, do not create new item objects in the database, just grab the item from the cart, and then push the item as many times as the \u003Cem\u003Edifference\u003C/em\u003E of the original quantity from the updated quantity. There are many other questions that could be asked about the cart, but I think they will not be addressed in this specific article.\u003Cbr\u003E\u003Cbr\u003EYou can find the git repository for SellBy at this \u003Ca href=\"https://github.com/mmartinezluis/sellby-online-store\" target=\"_self\"\u003E\u003Cstrong\u003Elink\u003C/strong\u003E\u003C/a\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Aug 12, 2021",
    "images": [
      {
        "id": 101,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "Figure 1. SellBy_login_page.png",
        "s3key": null,
        "size": 130085,
        "url": "https://i.imgur.com/hfewbrR.png"
      }
    ],
    "status": "published",
    "title": "Building an Online Store",
    "url": "luismartinez/building-an-online-store-b2b93976",
    "user_id": 1
  },
  {
    "id": 10,
    "abstract": "Javascript event listeners are an important component in the user experience with a webpage. Event listeners allow to dynamically display lots of information and provide rich functionality to a webpage without page reload. In this article I would like to discuss my experience with Javascript event listeners while working on my Javascript project, ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EJavaScript Event Listeners\u003C/h1\u003E\n\u003Cp\u003EJavascript event listeners are an important component in the user experience with a webpage. Event listeners allow to dynamically display lots of information and provide rich functionality to a webpage without page reload. In this article I would like to discuss my experience with Javascript event listeners while working on my Javascript project, \u003Cstrong\u003E\u003Cem\u003EStoQuotes\u003C/em\u003E\u003C/strong\u003E, as part of Flatiron school software engineering 4th milestone project. [Note: this is one of my Medium articles transferred to DevBlog; you can find the original article \u003Ca href=\"https://luis-mmartinez.medium.com/javascript-event-listeners-f733052ab0c0\" target=\"_blank\"\u003Ehere\u003C/a\u003E for comparison purposes]\u003C/p\u003E\n\u003Ch2\u003E\u003Cstrong\u003EEvent Listeners and API Calls\u003C/strong\u003E\u003C/h2\u003E\n\u003Cp\u003EThe project required to use Rails as an API for the backend (the server side) implementing RESTful routes and the MVC framework, and \u003Cstrong\u003Eobject-oriented Javascript\u003C/strong\u003E for the frontend (the client side). In addition, all functionality needed to occur within a single page using AJAX calls (that is, no page reload). For this project, I decided to extend my previous Ruby command line interface (CLI) project, \u003Cstrong\u003E\u003Cem\u003EQuotesApp\u003C/em\u003E\u003C/strong\u003E, and make it live in a webpage using Javascript, while adding additional functionalities. In QuotesApp, a user can select to get a random quote, a quote from a list of ten random authors, or a quote from a list of five categories (you can find an article on QuotesApp \u003Ca href=\"https://luis-mmartinez.medium.com/object-oriented-ruby-and-my-first-ruby-project-quotes-app-d47cec3585f1\" target=\"_self\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E, and the link to the repo \u003Ca href=\"https://github.com/mmartinezluis/quotes-app-cli\" target=\"_self\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E). For my javascript project, I included all features from QuotesApp and added the functionality for a user to search for their desired author, and the ability to write a \u003Cstrong\u003E\u003Cem\u003Estory\u003C/em\u003E\u003C/strong\u003E, edit a \u003Cstrong\u003E\u003Cem\u003Estory\u003C/em\u003E\u003C/strong\u003E, or delete a \u003Cstrong\u003E\u003Cem\u003Estory\u003C/em\u003E\u003C/strong\u003E for any given quote; hence the name for the app, \u003Cstrong\u003E\u003Cem\u003EStoQuotes\u003C/em\u003E\u003C/strong\u003E.\u003C/p\u003E\n\u003Cp\u003EDeveloping this project was very exciting to me as I was going to transform my very first app, QuotesApp, accessible only in the command line, and make it available in a webpage. Let us take a look at a snapshot of the welcome interface for each of the applications:\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1400/1*nRc0MyOQfLiCYV18Is-hbw.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Cspan style=\"font-size: 16px;\"\u003E\u003Cem\u003EFigure 1. QuotesApp welcome interface\u003C/em\u003E\u003C/span\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1400/1*oW9rQWI2tliwIjNKvwmrBA.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Cspan style=\"font-size: 16px;\"\u003E\u003Cem\u003EFigure 2. StoQuotes welcome interface\u003C/em\u003E\u003C/span\u003E\u003C/p\u003E\n\u003Cp\u003EAlong with event listeners, I would also like to discuss how my approach to the code changed as I was guided by the project workflow. I wanted a new set of ten authors to be displayed each time the Authors tab was clicked. So, at first, I added an event listener to the Authors tab, with a callback function that triggered a get request to the \u003Ccode\u003E/authors \u003C/code\u003Eendpoint of my API:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// In index.js:\u003Cbr\u003Econst authorsTab = document.getElementById('nav-authors-tab');\u003Cbr\u003EauthorsTab.addEventListener('click', () =&gt; {\u003Cbr\u003E  authorService.getAuthors();\u003Cbr\u003E})\u003Cbr\u003E\u003Cbr\u003E// In authorService.js:\u003Cbr\u003EgetAuthors(){\u003Cbr\u003E  fetch(`${this.endpoint}/authors`)\u003Cbr\u003E  .then (resp =&gt; resp.json())\u003Cbr\u003E  .then(authors =&gt; {\u003Cbr\u003E    for (const author of authors){\u003Cbr\u003E      const a = new Author(author)\u003Cbr\u003E      a.addToDom();\u003Cbr\u003E    }\u003Cbr\u003E  })\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EThen I configured my API to render just ten random authors rather than all authors:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003E# In authors_controller.rb in API:\u003Cbr\u003Edef index\u003Cbr\u003E  authors = Author.all.sample(10)`\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EHowever, at a later stage, I realized that I would eventually need all authors– when the Search Author tab was clicked. With such a setting, I would have an API call for each click on the Authors tab and the Search Author tab, respectively. I was not happy with this setting and came up with a solution: load all the authors upon initialization of the app, and manipulate my javascript\u003Ccode\u003EAuthor.all\u003C/code\u003E array to get the desired number of authors I wanted to display depending on the scenario I was working on. Below is the code that shows this new approach:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFirst, reconfigure the backend to send all authors:\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003E# In authors_controller.rb in API:\u003Cbr\u003Edef index\u003Cbr\u003E  authors = Author.all\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cul\u003E\n\u003Cli\u003EThen, load (\u003Cstrong\u003Einstantiate\u003C/strong\u003E) the authors in the frontend (one API call):\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// In index.js:\u003Cbr\u003EauthorService.loadAuthors()\u003Cbr\u003E\u003Cbr\u003E// In authorService.js:\u003Cbr\u003EloadAuthors(){\u003Cbr\u003E  fetch(`${this.endpoint}/authors`)\u003Cbr\u003E  .then(resp =&gt; resp.json())\u003Cbr\u003E  .then(authors =&gt; {\u003Cbr\u003E    for(const author of authors){\u003Cbr\u003E      const a = new Author(author)\u003Cbr\u003E    }\u003Cbr\u003E  })\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cul\u003E\n\u003Cli\u003ELast, refactor the \u003Ccode\u003EgetAuthors()\u003C/code\u003Emethod from the AuthorService class to retrieve ten random authors from the Author.all array generated in author.js (no API calls):\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// In index.js:\u003Cbr\u003Econst authorsTab = document.getElementById('nav-authors-tab')\u003Cbr\u003EauthorsTab.addEventListener('click', () =&gt; {\u003Cbr\u003E  authorService.getAuthors();\u003Cbr\u003E})\u003Cbr\u003E\u003Cbr\u003E// In authorService.js:\u003Cbr\u003EgetAuthors(){\u003Cbr\u003E  // Empty the authors container\u003Cbr\u003E  Author.authorsContainer.innerHTML = \"\"\u003Cbr\u003E  // Make a copy of the Author.all array, shuffle the array, get 10 authors, and sort by author name\u003Cbr\u003E  const authors =  \u003Cbr\u003E  shuffleArray(Author.all.slice(0)).slice(0,10).sort((a,b) =&gt; {\u003Cbr\u003E    if (a.name &gt; b.name){\u003Cbr\u003E      return 1;\u003Cbr\u003E    }\u003Cbr\u003E    if (a.name &lt; b.name){\u003Cbr\u003E      return -1\u003Cbr\u003E    }\u003Cbr\u003E    return 0;\u003Cbr\u003E  });\u003Cbr\u003E  // Add each author to the DOM\u003Cbr\u003E  authors.forEach(author =&gt; author.addToDom())\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cp\u003EThe result? Only one API call is made to the \u003Ccode\u003E/authors \u003C/code\u003Eendpoint; after that, authors are retrieved from the javascript Author class. Below are two pictures that partially show the functionality of the three previous code snippets:\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*8pKP3_-T41C3ExMEHWf_zg.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Cspan style=\"font-size: 16px;\"\u003E\u003Cem\u003EFigure 3. Clicking the Authors tab one time renders ten random authors.\u003C/em\u003E\u003C/span\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*7fcxFLRG538IELVBKV_aoQ.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Cspan style=\"font-size: 16px;\"\u003E\u003Cem\u003EFigure 4. Clicking the Authors tab another time renders a new set of ten random authors.\u003C/em\u003E\u003C/span\u003E\u003C/p\u003E\n\u003Ch2\u003EObject Instantiation and Event Listeners&nbsp;\u003C/h2\u003E\n\u003Cp\u003EAnother important component of my project consisted in populating a datalist with all the authors from my API. A datalist is a HTML element that can be linked to an input field and provides a list of available options as the user types in the input field. The displayed options are appended to the datalist element. Find an example below:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E&lt;input type=\"text\" list=\"author-name\"&gt;\u003Cbr\u003E&lt;datalist id=\"author-name\"&gt;\u003Cbr\u003E&lt;/datalist&gt;\u003C/pre\u003E\n\u003Cp\u003EThe datalist is linked to the input field via its \u003Cstrong\u003Eid attribute\u003C/strong\u003E, matching the input’s \u003Cstrong\u003Elist attribute\u003C/strong\u003E. The datalist takes option elements:\u003C/p\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E&lt;input type=\"text\" list=\"author-name\"&gt;\u003Cbr\u003E&lt;datalist id=\"author-name&gt;\u003Cbr\u003E  &lt;option value=\"Isaac Newton\"&gt;\u003Cbr\u003E  &lt;option value=\"Charles Dickens\"&gt;\u003Cbr\u003E&lt;/datalist&gt;\u003C/pre\u003E\n\u003Cp\u003EThe above datalist contains two options (two authors); I needed to populate the datalist for my project with all the authors from my API: more than 700. Obviously, populating the datalist needed to be done dynamically. After a big fight with nonworking static methods, I arrived at a solution via object instantiation. Bear with me on the next steps to end this article:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EFire an instance method upon initialization of the app:\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// In index.js:\u003Cbr\u003EauthorService.loadAuthors()&nbsp;\u003C/pre\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe instance method instantiates all authors on the frontend:\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003E// In authorService.js:\u003Cbr\u003EloadAuthors(){\u003Cbr\u003E  fetch(`${this.endpoint}/authors`)\u003Cbr\u003E  .then(resp =&gt; resp.json())\u003Cbr\u003E  .then(authors =&gt; {\u003Cbr\u003E    for(const author of authors){\u003Cbr\u003E      const a = new Author(author)\u003Cbr\u003E      a.addToDatalist()\u003Cbr\u003E    }\u003Cbr\u003E  })\u003Cbr\u003E}\u003C/pre\u003E\n\u003Cul\u003E\n\u003Cli\u003ECreate an option HTML element for each author object upon instantiation:\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cpre\u003E```javascript\u003Cbr\u003Eclass Author {\u003Cbr\u003E  static all = []\u003Cbr\u003E  static authorsContainer = document.getElementById('authors-container')\u003Cbr\u003E  static datalist = document.getElementById('author-name')  \u003Cbr\u003E  constructor({id, name}) {\u003Cbr\u003E    this.id = id,\u003Cbr\u003E    this.name = name\u003Cbr\u003E    // 'this.element' is used for rendering authors\u003Cbr\u003E    this.element = document.createElement('li')\u003Cbr\u003E    this.element.dataset.id = this.id\u003Cbr\u003E    this.element.id = `author-${this.id}`\u003Cbr\u003E    this.element.addEventListener('click', this.handleClick) \u003Cbr\u003E    // 'this.option' is used for author-name datalist\u003Cbr\u003E    this.option = document.createElement('option')\u003Cbr\u003E    this.option.value = this.name\u003Cbr\u003E    Author.all.push(this)\u003Cbr\u003E  }  \u003Cbr\u003E\u003Cbr\u003E  addToDatalist(){\u003Cbr\u003E    Author.datalist.appendChild(this.option)\u003Cbr\u003E  }\u003Cbr\u003E  // more code\u003C/pre\u003E\n\u003Cul\u003E\n\u003Cli\u003EFinally, each author is appended to the datalist via the addToDatalist method.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003E\u003Cbr\u003EYou can find a link to StoQuotes frontend repo \u003Ca href=\"https://github.com/mmartinezluis/stoquotes-frontend\" target=\"_self\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E, and its backend repo \u003Ca href=\"https://github.com/mmartinezluis/stoquotes-backend\" target=\"_self\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Aug 12, 2021",
    "images": [
      {
        "id": 102,
        "alt": null,
        "caption": null,
        "format": null,
        "name": "event_listeners.jpeg",
        "s3key": null,
        "size": 383356,
        "url": "https://i.imgur.com/jLj3vOS.jpeg"
      }
    ],
    "status": "published",
    "title": "JavaScript Event Listeners",
    "url": "luismartinez/my-vanilla-javascript-project-stoquotes-dd9cabb2",
    "user_id": 1
  },
  {
    "id": 9,
    "abstract": "APIs provide a link between a client and a server so that the client can get (and, depending on the level of authorization for the client), post, edit, and/or delete information from the server. An API can be considered as a database. You can create your own API or you can use someone else’s API (an external API). In this article, I would like to discuss my experience using an external API for the first time in my Ruby on Rails project, ",
    "author_name": "Luis Martinez",
    "body": "\u003Ch1\u003EUsing an External API in your Ruby on Rails Application\u003C/h1\u003E\n\u003Cp\u003EAPIs provide a link between a client and a server so that the client can get (and, depending on the level of authorization for the client), post, edit, and/or delete information from the server. An API can be considered as a database. You can create your own API or you can use someone else’s API (an external API). In this article, I would like to discuss my experience using an external API for the first time in my Ruby on Rails project, \u003Cstrong\u003E\u003Cem\u003EHotel Booking\u003C/em\u003E\u003C/strong\u003E\u003Cem\u003E,\u003C/em\u003E as part of Flatiron software engineering third milestone project. [Note: this is one of my Medium articles transferred to DevBlog. You can find the original article \u003Ca href=\"https://luis-mmartinez.medium.com/using-an-external-api-in-your-ruby-on-rails-application-d560ab410801\" target=\"_blank\"\u003Ehere\u003C/a\u003E  for comparison purposes]\u003C/p\u003E\n\u003Ch2\u003ESetting Up your App for API Use\u003C/h2\u003E\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003EHotel Booking\u003C/em\u003E\u003C/strong\u003E is an app that allows users to search and make hotel reservations in real-time at more than 150,000 hotels worldwide (note: the reservations are valid in real-time at time of booking but booking takes place within the application only). This is possible due to the app using an external API, the Amadeus Hotel Search API. As discussed above, this was my first time using an external API, and I would like to provide as many details as possible on how to use an external API since it took me a while to get things to work.\u003C/p\u003E\n\u003Cp\u003EThe first thing is to get an API that you want to use for your application. For example, say your application includes a weather feature, where the user enters data for a given location and the application returns the current weather conditions for that location. Your ruby on rails application does not count with this weather information, so you need to set up your application to make a request to an external source to get the weather information. An example of such an external source would be the\u003Ca href=\"https://developer.accuweather.com/\" target=\"_self\"\u003E AccuWeather API\u003C/a\u003E. You may click on this \u003Ca href=\"https://github.com/public-apis/public-apis\" target=\"_self\"\u003Elink\u003C/a\u003E for a starter list of APIs.\u003C/p\u003E\n\u003Cp\u003EOnce you know the API you want to use, the next step is to familiarize yourself with the documentation for the API. The format to make a request to an API may vary from one API to another, but generally the request format is as follows:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E\"base_url/endpoint\"\u003Cbr\u003E\u003Cbr\u003EThe base url is a constant, while the endpoint changes depending on the information you want to get. For example, a request to the AccuWeather API for the current whether conditions at a given location looks like this\u003Cbr\u003E\u003Cbr\u003Ehttp://dataservice.accuweather.com/currentconditions/v1/\u003Cstrong\u003E{locationKey}\u003C/strong\u003E\u003Cbr\u003E\u003Cbr\u003Ewhere \"{locationKey}\" is the endpoint and needs to be replaced with the key for the location you want the information from (you need to follow the API documentation to get a locationKey)\u003C/pre\u003E\n\u003Cp\u003EFor my project I used the \u003Ca href=\"https://developers.amadeus.com/self-service/category/hotel/api-doc/hotel-search\" target=\"_self\"\u003EAmadeus Hotel Search API\u003C/a\u003E. The API provides real-time hotel reservations information for more than 150,000 hotels. Just for reference, along with Amadeus, Sabre and Travelport are the three major global distribution systems (GDS) worldwide (GDS are used by travel agencies for making travel reservations for customers). You may take a look at this \u003Ca href=\"https://www.altexsoft.com/blog/engineering/travel-and-booking-apis-for-online-travel-and-tourism-service-providers/\" target=\"_self\"\u003Ewebsite\u003C/a\u003E for more info on travel APIs.\u003C/p\u003E\n\u003Cp\u003ESome APIs require that you get an API key and an API secret in order to use the API. To get those you need to follow the API’s documentation (getting the key and secret usually involves creating a developer account with the API company). The Amadeus Hotel Search does require an API key and secret.\u003C/p\u003E\n\u003Cp\u003EOnce you get your API key and API secret (if required by the API), create a file called “.env” in the main directory of your Rails app:\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*uj7w5r0mEeXTEgFoUJcfow.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 2. Location of the “.env” file within a Rails app.\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EWithin this “.env” file create variables to store the API key and API secret (that you got from the API’s website). For example:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EAMADEUS_API_KEY = pasteYourAPIkeyHere\u003Cbr\u003E\u003Cbr\u003EAMADEUS_API_SECRET = pasteYourAPIsecretHere\u003C/pre\u003E\n\u003Cp\u003ETo be able to later use these two variables in your application, you need to include the \u003Ccode\u003E\u003Cstrong\u003Edotenv-rails\u003C/strong\u003E\u003C/code\u003E gem in your gemfile to make the variables environment variables.\u003C/p\u003E\n\u003Cp\u003EFrom now on, I’ll show what I did to get the API to work for my app (after doing lots of research); however, be aware that there may be variations on how to implement the next steps.\u003C/p\u003E\n\u003Cp\u003EThe next step will be to create a class for a Plain Old Ruby Object (PORO) for your API. A PORO is just a plain ruby object, without ActiveRecord. Create a file within your models folder to hold the API class. This was the class I created for the project:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003E# In app/models/amadeus_api.rb\u003Cbr\u003Erequire 'amadeus'\u003Cbr\u003Eclass AmadeusApi\u003Cbr\u003E  attr_accessor :amadeus  \u003Cbr\u003E  def initialize()\u003Cbr\u003E    @amadeus = Amadeus::Client.new({\u003Cbr\u003E      client_id: \"#{ENV['AMADEUS_API_KEY']}\",\u003Cbr\u003E      client_secret: \"#{ENV['AMADEUS_API_SECRET']}\"\u003Cbr\u003E    })\u003Cbr\u003E  end\u003Cbr\u003E  # ...more code\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003ELet us break down the above code:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EWe created a plain Ruby class, AmadeusApi.\u003C/li\u003E\n\u003Cli\u003EWe required the ‘amadeus’ gem at the top of the file. Why? The documentation for the API tells us to do so (also, include the amadeus gem in your gemfile).\u003C/li\u003E\n\u003Cli\u003EInstantiating an object from this class requires to use your API key and API secret, which are automatically loaded from the “.env” file, \u003Cem\u003Eand you do not need\u003C/em\u003E to replace their corresponding values in the above code.\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EWe also have an \u003Cstrong\u003EAmadeus::Client\u003C/strong\u003E class (inside the initialize method). Where did it come from? We need to use an \u003Cstrong\u003Einstance\u003C/strong\u003E of this \u003Cstrong\u003EAmadeus::Client\u003C/strong\u003E class in order to make requests to the API. The documentation, which you can find \u003Ca href=\"https://github.com/amadeus4dev/amadeus-ruby\" target=\"_self\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E, provides it to us.\u003C/p\u003E\n\u003Cp\u003EThere are a couple of things to care of here. For example, what happens when we write:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EmyObject = AmadeusApi.new\u003C/pre\u003E\n\u003Cp\u003EWell, first, we get a new instance of the PLAIN (NON SPECIAL) AmadeusApi ruby class. That PLAIN ruby instance is stored in the \u003Cstrong\u003EmyObject\u003C/strong\u003E variable. Can we make an API request just using \u003Cstrong\u003EmyObject\u003C/strong\u003E? No, it is a plain ruby class and it is not connected to the API. Now, when we write \u003Ccode\u003EmyObject = AmadeusApi.new \u003C/code\u003Ean instantiate of the \u003Cstrong\u003EAmadeus::Client\u003C/strong\u003E class is also created AND STORED in the \u003Cstrong\u003E@amadeus\u003C/strong\u003E instance variable (look at the above initialize method). How can we access this instance of the SPECIAL \u003Cstrong\u003EAmadeus::Client\u003C/strong\u003E class? We wrote an attribute accessor for the variable “amadeus”; hence, if we now write&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003EmyObject.amadeus\u003C/pre\u003E\n\u003Cp\u003Ewe will get the \u003Cstrong\u003EAmadeus::Client \u003C/strong\u003Eobject stored in the @amadeus instance variable. What is the usefulness of all this? Well, say that you are in one of your controllers and you want to make a request to the API. For example, in my hotels controller I need to check that a reservation is still available when a user clicks on “Reserve” before creating a new reservation. I make an API request to the reservation endpoint like this:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003E# In hotels_controller.rb\u003Cbr\u003Edef reserve  \u003Cbr\u003E  # Get an Amadeus::Client object\u003Cbr\u003E api = AmadeusApi.new.amadeus \u003Cbr\u003E  # Use the Amadeus::Client object to make a request to the API to see whether the offer with the given code is still available    \u003Cbr\u003E reservation = api.shopping.hotel_offer(params[:code]).get.data \u003Cbr\u003E  # ...more code\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003E\u003Cstrong\u003Ereservation\u003C/strong\u003E above will be an array that will contain (among many other things) an ‘available’ key with a value of true or false. You will need to later manipulate the reservation variable to get the ‘available’ key.\u003C/p\u003E\n\u003Cp\u003EThe right hand side of ‘reservation’ in the above code is a \u003Cstrong\u003Eget request\u003C/strong\u003E to the API. You need to study your API documentation to know the available variations (the endpoints) for the API requests.\u003C/p\u003E\n\u003Cp\u003ENotice that the above get request contains one argument only. Get requests can be a little more involved and that’s where our plain old ruby class comes into play. Consider the below code snippet:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Edef index \u003Cbr\u003E  #...some code handling nested routes\u003Cbr\u003E # Code for handling making an API request \u003Cbr\u003E  if params[:city] &amp;&amp; !params[:city].blank? \u003Cbr\u003E    api = AmadeusApi.new \u003Cbr\u003E    user_id = current_user.id \u003Cbr\u003E    begin \u003Cbr\u003E      @hotels = api.query_city(\u003Cbr\u003E        params[:city], \u003Cbr\u003E        params[:checkin_date], \u003Cbr\u003E        params[:checout_date], \u003Cbr\u003E        params[:guests], user_id) \u003Cbr\u003E    rescue StandardError =&gt; e \u003Cbr\u003E      flash[:msg] = \"#{e.class}: #{e.message}. Invalid city code or input value. Please try again...\" \u003Cbr\u003E      render :'index.html.erb' and return \u003Cbr\u003E    end \u003Cbr\u003E    if @hotels.empty? \u003Cbr\u003E      flash[:msg] = \"Ooops, no hotels could be found for the requested specifications\" \u003Cbr\u003E    end \u003Cbr\u003E  end \u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EOn line 8 we invoke an instance method (#query_city) on an instance of our plain ruby AmadeusApi class. Let us go to our AmadeusApi class to see this method:\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Erequire 'amadeus'\u003Cbr\u003Eclass AmadeusApi  \u003Cbr\u003E  attr_accessor :amadeus  \u003Cbr\u003E  def initialize() \u003Cbr\u003E    @amadeus = Amadeus::Client.new({ \u003Cbr\u003E      client_id: \"#{ENV['AMADEUS_API_KEY']}\", \u003Cbr\u003E      client_secret: \"#{ENV['AMADEUS_API_SECRET']}\" \u003Cbr\u003E    }) \u003Cbr\u003E  end  \u003Cbr\u003E\u003Cbr\u003E  def query_city(\u003Cbr\u003E    citycode, \u003Cbr\u003E    checkin_date = Date.today.to_s, \u003Cbr\u003E    checkout_date = (Date.today+1).to_s, \u003Cbr\u003E    guests = 2, \u003Cbr\u003E    user_id\u003Cbr\u003E   ) \u003Cbr\u003E   response = @amadeus.shopping.hotel_offers.get( \u003Cbr\u003E      cityCode: citycode, \u003Cbr\u003E      checkInDate: checkin_date, \u003Cbr\u003E      checkOutDate: checkout_date, \u003Cbr\u003E      adults: guests, \u003Cbr\u003E      currency: \"USD\" \u003Cbr\u003E    ).data \u003Cbr\u003E    parse_city_responnse(response, user_id) \u003Cbr\u003E  end    \u003Cbr\u003E  # ...more code\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003EWe have the ‘query_city’ method on line 12. What does this method do? It makes an API request, \u003Ccode\u003E@amadeus.shopping.hotel_offers( #request parameters and their corresponding value)\u003C/code\u003E. What is \u003Ccode\u003E@amadeus\u003C/code\u003E? It is the instance variable containing our Amadeus::Client object for making API requests. This request contains five parameters, and we can get the syntax for each parameter from the API documentation. Bottomline: familiarize yourself well with the API documentation, specially for (relatively) complex ones, such as this one, where you have plenty of options for the request body.\u003C/p\u003E\n\u003Ch2\u003EError Handling for API Responses\u003C/h2\u003E\n\u003Cp\u003EI would like to go over error handling. When making an API request, the response is not always a json object or an array, it could be an error, and the error can make your app crash (stop working). That is why we need to handle errors when dealing with APIs. On line 7 in figure 3 we have a ‘begin” block. Begin blocks usually have the following format:&nbsp;\u003C/p\u003E\n\u003Cpre\u003E```ruby\u003Cbr\u003Ebegin\u003Cbr\u003E  # Some code where you get a response from an API\u003Cbr\u003Erescue\u003Cbr\u003E # Some fallback action in case the response comes with an error\u003Cbr\u003Eend\u003C/pre\u003E\n\u003Cp\u003ETo better understand error handling, consider the below figure in which I make a request using an invalid city code in my app:\u003Cbr\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*up0PqsDM1r1LI4ytb8c-8Q.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 5. Making an API request using invalid input for the city name field; will cause an error response from the API.\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EThe field ‘Search for” should be the name of a city, but I just wrote a random string. Before clicking on the Search button, I went on and \u003Cstrong\u003Eremoved\u003C/strong\u003E the ‘\u003Cstrong\u003Ebegin\u003C/strong\u003E’, ‘\u003Cstrong\u003Erescue\u003C/strong\u003E’ and ‘\u003Cstrong\u003Eend\u003C/strong\u003E’ words from my hotels controller (refer to figure 3 above for the code). This is what happens some seconds after clicking on the “Search” button:\u003Cbr\u003E\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*3UC-oFZbcVexSoxZaWNndQ.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 6. App crashes due to error response from API\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EThe API request returns an error and the app crashes (stops working). The error originated in the query_city method within the AmadeusApi class (see figure 4). Now, I \u003Cstrong\u003Eincluded\u003C/strong\u003E back the ‘\u003Cstrong\u003Ebegin\u003C/strong\u003E’ , ‘\u003Cstrong\u003Erescue\u003C/strong\u003E’ and ‘\u003Cstrong\u003Eend\u003C/strong\u003E’ key words from figure 3 in my hotels controller, and this is what happens when I make a request using invalid input for the city name field:\u003C/p\u003E\n\u003Cp\u003E\u003Cbr\u003E\u003C/p\u003E\n\u003Cimg src=\"https://miro.medium.com/max/1260/1*jmnsGUv-cpVGcKWU-5qI9A.png\" alt=\"undefined\" style=\"height: ;width: \"/\u003E\n\u003Cp\u003E\u003Csup\u003EFigure 7. Handling an API error response using a ‘begin’ block.\u003C/sup\u003E\u003C/p\u003E\n\u003Cp\u003EThe app does not crash, but rather displays a flash message containing the error details.\u003C/p\u003E\n\u003Cp\u003EI found \u003Ca href=\"https://www.honeybadger.io/blog/a-beginner-s-guide-to-exceptions-in-ruby/\" target=\"_self\"\u003Ethis article\u003C/a\u003E to be very useful in explaining how to rescue exceptions (errors).\u003C/p\u003E\n\u003Cp\u003EAny comments and/or suggestions are very welcomed. You can find the git repository for \u003Cem\u003EHotel Booking\u003C/em\u003E \u003Ca href=\"https://github.com/mmartinezluis/hotel-booking\" target=\"_self\"\u003E\u003Cstrong\u003Ehere\u003C/strong\u003E\u003C/a\u003E.\u003C/p\u003E\n",
    "category": null,
    "coming_from": "database",
    "creation_time": "Aug 12, 2021",
    "images": [],
    "status": "published",
    "title": "Using an External API in your Ruby on Rails Application",
    "url": "luismartinez/my-ruby-on-rails-project-hotel-booking-5459a285",
    "user_id": 1
  }
]